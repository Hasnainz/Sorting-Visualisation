{"version":3,"sources":["components/Algorithms/heapsort.js","components/Algorithms/quicksort.js","components/Algorithms/insertionsort.js","components/Navbar.jsx","components/Algorithms/bubblesort.js","components/Algorithms/mergesort.js","components/Sort.jsx","components/Runtimes.jsx","App.js","serviceWorker.js","index.js"],"names":["animations","size","Navbar","props","className","to","getBubbleSortAnimations","array","swapped","i","length","j","a","b","push","getHeapSortAnimations","Math","floor","maxHeap","swap","HeapSort","left","right","max","input","indexA","indexB","temp","getQuickSortAnimations","QuickSort","index","len","Partition","middle","pivot","getMergeSortAnimations","auxiliaryArray","slice","MergeSort","auxillaryArray","start","end","Merge","getInsertionSortAnimations","key","insertionSort","pixelwidth","width","height","animationSpeed","isRunning","barColour","Sort","properties","state","updateWindowDimensions","bind","onSizeSliderChange","onSpeedSliderChange","window","addEventListener","this","resetArray","removeEventListener","innerWidth","innerHeight","buttons","document","getElementsByClassName","disabled","getElementById","arr","setState","forceUpdate","wait","StopRunning","arrayBars","StartSorting","barOneIndex","barTwoIndex","barOneHeight","barTwoHeight","barOneStyle","style","barTwoStyle","backgroundColor","parseInt","AnimationFinished","barHeight","tempPivotIndex","previousPivot","pivotIndex","keyHeight","min","random","event","target","value","map","onClick","BubbleSort","InsertionSort","class","id","type","onChange","React","Component","ms","Promise","resolve","setTimeout","Runtimes","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d650fca.chunk.js","sourcesContent":["let animations, size;\r\nexport default function getHeapSortAnimations(array){\r\n    animations = []\r\n    size = array.length;\r\n    HeapSort(array);\r\n    return animations;\r\n}\r\nfunction HeapSort(array){\r\n    for (let i = Math.floor(size / 2); i >= 0; i --){\r\n        maxHeap(array, i);\r\n    }\r\n    for (let i = array.length - 1; i > 0; i--){\r\n        animations.push([0, i, array[0], array[i]]);\r\n        swap(array, 0, i);\r\n        size--\r\n        maxHeap(array, 0);\r\n    }\r\n    return;\r\n}\r\nfunction maxHeap(array, i) {\r\n    const left = 2 * i + 1\r\n    const right = 2 * i + 2\r\n    let max = i\r\n\r\n    if (left < size && array[left] > array[max]){\r\n        max = left\r\n    }\r\n\r\n    if (right < size && array[right] > array[max]){\r\n        max = right\r\n    }\r\n\r\n    if (max !== i) {\r\n        animations.push([i, max, array[i], array[max]]);\r\n        swap(array, i, max)\r\n        maxHeap(array, max)\r\n    }\r\n}\r\n\r\nfunction swap(input, indexA, indexB) {\r\n    const temp = input[indexA]\r\n    input[indexA] = input[indexB]\r\n    input[indexB] = temp\r\n}","let animations;\r\n\r\nexport default function getQuickSortAnimations(array){\r\n    animations = [];\r\n    QuickSort(array, 0, array.length-1)\r\n    return animations;\r\n}\r\n    \r\nfunction QuickSort(array, left = 0, right = array.length - 1) {\r\n    let len = array.length,index;\r\n    if(len > 1) {\r\n      index = Partition(array, left, right)\r\n      if(left < index - 1) {\r\n        QuickSort(array, left, index - 1);\r\n      } \r\n      if(index < right) {\r\n        QuickSort(array, index, right);\r\n      }\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction Partition(array, left, right) {\r\n    let middle = Math.floor((right + left) / 2),\r\n        pivot = array[middle],\r\n        i = left,\r\n        j = right\r\n        animations.push([middle, pivot])\r\n    while(i <= j) {\r\n        while(array[i] < pivot) {\r\n            animations.push([i]);\r\n            i++\r\n        }\r\n        while(array[j] > pivot) {\r\n            animations.push([j]);\r\n            j--\r\n        }\r\n        \r\n        if(i <= j) {\r\n            animations.push([i, j, array[i], array[j]]); \r\n            [array[i], array[j]] = [array[j], array[i]];\r\n            i++\r\n            j--\r\n        }\r\n    }\r\n    return i;\r\n}","let animations;\r\nexport default function getInsertionSortAnimations(array){\r\n    animations = [];\r\n    insertionSort(array);\r\n    return animations;\r\n}\r\n    \r\nfunction insertionSort(array){\r\n    let size = array.length;\r\n    for (let i = 1; i < size; i++){\r\n        let key = array[i];\r\n        let j = i - 1;\r\n        while (j >= 0 && array[j] > key){\r\n            animations.push([j, i, array[j]]);\r\n            array[j + 1] = array[j];\r\n            j-- ;\r\n        }\r\n        animations.push([j+1, key])\r\n        array[j + 1] = key;\r\n    }\r\n    return array;\r\n};","import React from \"react\";\r\nimport './NavbarStyles.css';\r\nimport { Link } from 'react-router-dom';\r\nconst Navbar = props => (\r\n  <header className=\"navbar\">\r\n    <nav className=\"navbar-navigation\">\r\n      <div className=\"navbar-navigation-items\">\r\n        <ul>\r\n          <Link to=\"/Sorting-Visualisation\">\r\n            <li>Sorting</li>\r\n          </Link>\r\n          <Link to=\"/Compare-Runtimes\">\r\n            <li>Compare Runtimes</li>\r\n          </Link>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  </header>\r\n);\r\n  \r\nexport default Navbar;","export default function getBubbleSortAnimations(array){\r\n    let animations = [];\r\n    const arrayLength = array.length;\r\n    let swapped;\r\n    for (let i=arrayLength; i>0; i--) {\r\n        swapped = 0;\r\n        for ( let j=1; j<i; j++ ) {\r\n        const a = array[j-1];\r\n        const b = array[j];\r\n        animations.push([j-1, j, a, b]);\r\n            if (a > b) {\r\n              array[j-1] = b;\r\n              array[j] = a;\r\n              swapped = j;\r\n            }\r\n        }\r\n        if (!swapped) {\r\n            break;\r\n        }else {\r\n            i = swapped + 1;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n    \r\n","export default function getMergeSortAnimations(array){\r\n    const auxiliaryArray = array.slice();\r\n    const animations = []\r\n    if (array.length <= 1) return array;\r\n    MergeSort(array, auxiliaryArray, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\nfunction MergeSort(array, auxillaryArray, start, end, animations){\r\n    if(start === end) return;\r\n    const middle = Math.floor((start + end)/2);\r\n    MergeSort(auxillaryArray, array, start, middle, animations);\r\n    MergeSort(auxillaryArray, array, middle + 1, end, animations);\r\n    Merge(array, auxillaryArray, start, end, middle, animations);\r\n}\r\nfunction Merge(array, auxillaryArray, start, end, middle, animations){\r\n    let left = start;\r\n    let right = middle + 1;\r\n    let index = start;\r\n    while(left <= middle && right <= end){\r\n        if(auxillaryArray[left] < auxillaryArray[right]){\r\n            animations.push([left, index, auxillaryArray[left]])\r\n            array[index] = auxillaryArray[left];\r\n            left++;\r\n        }else{\r\n            animations.push([right, index, auxillaryArray[right]])\r\n            array[index] = auxillaryArray[right];\r\n            right++;\r\n        }\r\n        index++;\r\n    }\r\n    while(left <= middle){\r\n        animations.push([left, index,auxillaryArray[left]])\r\n        array[index] = auxillaryArray[left];\r\n        left++;\r\n        index++;\r\n    }\r\n    while(right <= end){\r\n        animations.push([right, index, auxillaryArray[right]])\r\n        array[index] = auxillaryArray[right];\r\n        right++;\r\n        index++;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport './styles.css';\r\nimport getBubbleSortAnimations from './Algorithms/bubblesort';\r\nimport getHeapSortAnimations from './Algorithms/heapsort';\r\nimport getQuickSortAnimations from './Algorithms/quicksort';\r\nimport getMergeSortAnimations from './Algorithms/mergesort';\r\nimport getInsertionSortAnimations from './Algorithms/insertionsort';\r\n//This file is the main body of the first page.\r\n\r\n\r\n\r\nconst primaryColour = \"#70b8c7\"; //Air Superiority blue\r\nconst selectedColour = \"#383683\"; //Purple\r\nconst successColour = \"#97DB4F\"; //Inchworm green\r\nconst failedColour = \"#D64933\"; //Cinnabar\r\nconst pivotColour = \"#383683\"; //Deep Jungle Green\r\nconst backgroundColour = \"FFFFFF\";\r\nlet isRunning = false;\r\nlet barColour = primaryColour;\r\nlet size, pixelwidth, width, height, animationSpeed;\r\n\r\nexport default class Sort extends React.Component{\r\n  constructor(properties){\r\n    super(properties);\r\n    this.state = { array: []};\r\n\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    this.onSizeSliderChange = this.onSizeSliderChange.bind(this);\r\n    this.onSpeedSliderChange = this.onSpeedSliderChange.bind(this);\r\n  }\r\n  //On startup, this is what runs.\r\n  componentDidMount(){\r\n    window.addEventListener('resize', this.updateWindowDimensions());\r\n    this.updateWindowDimensions();\r\n    size = 100;\r\n    animationSpeed = 100;\r\n    pixelwidth = Math.floor((width/(size*2)));\r\n    this.resetArray();\r\n  }\r\n  //On closing, this is what runs\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions());\r\n  }\r\n  //This is so that *hopefully* this will work on any sized screen as the compenents will be generated based on screen size\r\n  updateWindowDimensions() {\r\n    width =  (window.innerWidth*(0.825));\r\n    height = (window.innerHeight*(0.825));\r\n  }\r\n  StartSorting(){\r\n    isRunning = true;\r\n    let buttons = document.getElementsByClassName(\"disabledbutton\");\r\n    for(let button of buttons){\r\n      button.disabled = true;\r\n    }\r\n    let slider = document.getElementById(\"size-slider\");\r\n    slider.disabled = true;\r\n  }\r\n  StopRunning(){\r\n    isRunning = false;\r\n    const arr = this.state.array;\r\n    this.setState({ arr });\r\n    let buttons = document.getElementsByClassName(\"disabledbutton\");\r\n    for(let button of buttons){\r\n      button.disabled = false;\r\n    }\r\n    let slider = document.getElementById(\"size-slider\");\r\n    slider.disabled = false;\r\n  }\r\n  async AnimationFinished(){\r\n    barColour = successColour;\r\n    this.forceUpdate();\r\n    await wait(1000);\r\n    barColour = primaryColour;\r\n    this.forceUpdate();\r\n    this.StopRunning();\r\n  }\r\n  //Instead of returning a sorted array, these algorithms sort the array but return\r\n  //an array of the order in which the elements were sorted giving an animation array.\r\n  async BubbleSort(){\r\n    let animations = getBubbleSortAnimations(this.state.array.slice());\r\n    const length = animations.length;\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    this.StartSorting();\r\n    for(let i=0;i<length;i++){\r\n      if(isRunning){\r\n        let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i]\r\n\r\n        let barOneStyle = arrayBars[barOneIndex].style;\r\n        let barTwoStyle = arrayBars[barTwoIndex].style;\r\n  \r\n        barOneStyle.backgroundColor = selectedColour;\r\n        barTwoStyle.backgroundColor = selectedColour;\r\n        await wait(animationSpeed);\r\n  \r\n        if(parseInt(barOneHeight) > parseInt(barTwoHeight)){\r\n          barOneStyle.height = `${barTwoHeight}px`;\r\n          this.state.array[barOneIndex] = barTwoHeight;\r\n\r\n          barTwoStyle.height = `${barOneHeight}px`;\r\n          this.state.array[barTwoIndex] = barOneHeight;\r\n          await wait(animationSpeed);\r\n        }else{\r\n          barOneStyle.backgroundColor = failedColour;\r\n          barTwoStyle.backgroundColor = failedColour;\r\n          await wait(animationSpeed);\r\n        }\r\n        barOneStyle.backgroundColor = primaryColour;\r\n        barTwoStyle.backgroundColor = primaryColour;\r\n      }\r\n      else{\r\n        return;\r\n      }\r\n    }\r\n    await this.AnimationFinished();\r\n  }\r\n\r\n  async MergeSort(){\r\n    let animations = getMergeSortAnimations(this.state.array.slice());\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    const length = animations.length;\r\n    this.StartSorting();\r\n    for(let i = 0; i < length; i++){\r\n      if(isRunning){\r\n        let [barOneIndex, barTwoIndex, barHeight] = animations[i];\r\n        if(barOneIndex === size) barOneIndex--;\r\n        if(barTwoIndex === size) barTwoIndex--;\r\n  \r\n        let barOneStyle = arrayBars[barOneIndex].style;\r\n        let barTwoStyle = arrayBars[barTwoIndex].style;\r\n        barOneStyle.backgroundColor = selectedColour;\r\n        barTwoStyle.backgroundColor = selectedColour;\r\n        await wait(animationSpeed);\r\n        barTwoStyle.height = `${barHeight}px`;\r\n        this.state.array[barTwoIndex] = barHeight;\r\n        await wait(animationSpeed);\r\n        barOneStyle.backgroundColor = primaryColour;\r\n        barTwoStyle.backgroundColor = primaryColour;\r\n      }\r\n      else{\r\n        return;\r\n      }\r\n    }\r\n    await this.AnimationFinished();\r\n  }\r\n\r\n  async HeapSort(){\r\n    let animations = getHeapSortAnimations(this.state.array.slice());\r\n    const length = animations.length;\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    this.StartSorting();\r\n    for(let i = 0; i < length; i++){\r\n      if(isRunning){\r\n        let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i];   \r\n        arrayBars[barOneIndex].style.backgroundColor = selectedColour;\r\n        arrayBars[barTwoIndex].style.backgroundColor = selectedColour;\r\n        await wait(animationSpeed);\r\n        arrayBars[barOneIndex].style.height = `${barTwoHeight}px`;\r\n        this.state.array[barOneIndex] = barTwoHeight;\r\n\r\n        arrayBars[barTwoIndex].style.height = `${barOneHeight}px`;\r\n        this.state.array[barTwoIndex] = barOneHeight;\r\n\r\n        arrayBars[barOneIndex].style.backgroundColor = successColour;\r\n        arrayBars[barTwoIndex].style.backgroundColor = successColour;\r\n        await wait(animationSpeed);\r\n        arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n        arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\r\n      }\r\n      else{\r\n        return;\r\n      }\r\n    }\r\n    await this.AnimationFinished();\r\n  }\r\n\r\n  async QuickSort(){\r\n    let animations = getQuickSortAnimations(this.state.array.slice());\r\n    const length = animations.length;\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    let tempPivotIndex = 0;\r\n    this.StartSorting();\r\n    for(let i = 0; i < length; i++){\r\n      if(isRunning){\r\n        if(animations[i].length === 4){\r\n          let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i];   \r\n          arrayBars[barOneIndex].style.height = `${barTwoHeight}px`;\r\n          this.state.array[barOneIndex] = barTwoHeight;\r\n\r\n          arrayBars[barTwoIndex].style.height = `${barOneHeight}px`;\r\n          this.state.array[barTwoIndex] = barOneHeight;\r\n\r\n          arrayBars[barOneIndex].style.backgroundColor = successColour;\r\n          arrayBars[barTwoIndex].style.backgroundColor = successColour;\r\n          await wait(animationSpeed);\r\n          arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n          arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\r\n        }\r\n        else if(animations[i].length === 2){\r\n          if(i !== 0){\r\n            let [previousPivot, notpivot] = animations[i-1];\r\n            arrayBars[previousPivot].style.backgroundColor = primaryColour;\r\n          }\r\n          let [pivotIndex, pivot] = animations[i];\r\n          arrayBars[pivotIndex].style.backgroundColor = pivotColour;\r\n          tempPivotIndex = pivotIndex;\r\n          await wait(animationSpeed);\r\n        }\r\n        else{\r\n          let [barOneIndex] = animations[i];\r\n          arrayBars[barOneIndex].style.backgroundColor = selectedColour;\r\n          await wait(animationSpeed);\r\n          arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n        }  \r\n      }\r\n      else{\r\n        arrayBars[tempPivotIndex].style.backgroundColor = primaryColour;\r\n        return;\r\n      }\r\n    }\r\n    await this.AnimationFinished();\r\n  }\r\n  async InsertionSort(){\r\n    let animations = getInsertionSortAnimations(this.state.array.slice());\r\n    const length = animations.length;\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    this.StartSorting();\r\n    for(let i = 0; i < length; i++){\r\n      if(isRunning){\r\n        if(animations[i].length === 3){\r\n          let [barOneIndex, barTwoIndex, barOneHeight] = animations[i];\r\n          arrayBars[barOneIndex].style.backgroundColor = selectedColour;\r\n          arrayBars[barTwoIndex].style.backgroundColor = selectedColour;\r\n          \r\n          arrayBars[barOneIndex+1].style.height = `${barOneHeight}px`;\r\n          this.state.array[barOneIndex+1] = barOneHeight;\r\n\r\n          await wait(animationSpeed);\r\n          arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n          arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\r\n        }\r\n        else{\r\n          let [barOneIndex, keyHeight, turn] = animations[i];\r\n          arrayBars[barOneIndex].style.height = `${keyHeight}px`;\r\n          this.state.array[barOneIndex] = keyHeight;\r\n\r\n          await wait(animationSpeed);\r\n        }\r\n      }\r\n      else{\r\n        return;\r\n      }\r\n    }\r\n    await this.AnimationFinished();\r\n  }\r\n  \r\n  resetArray(){\r\n    let array = [];\r\n    for (let i = 0; i < size-1; i++){\r\n      array.push(getRandomNumber(10, height));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  onSizeSliderChange(event){\r\n    size = event.target.value;\r\n    pixelwidth = Math.floor((width/(size*2)));\r\n    if(pixelwidth < 1) pixelwidth = 1;\r\n    this.resetArray()\r\n  }\r\n  \r\n  onSpeedSliderChange(event){\r\n    animationSpeed = 1000 - event.target.value;\r\n  }\r\n\r\n  render()\r\n  {\r\n    let array = this.state.array;\r\n    return (\r\n      <div className=\"total-container\">\r\n        <div className=\"array-container\">\r\n          <div className=\"not-array-bar\"\r\n              style={{\r\n              backgroundColor: backgroundColour,\r\n              height: `${height}px`,\r\n              width: `${1}px`,\r\n              }}\r\n          ></div>\r\n          {array.map((value, index) => (\r\n            <div className=\"array-bar\"\r\n              key={index}\r\n              style={{\r\n                backgroundColor: barColour,\r\n                height: `${value}px`,\r\n                width: `${pixelwidth}px`,\r\n              }}></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <div>\r\n              <button className=\"disabledbutton\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n              <button className=\"disabledbutton\" onClick={() => this.MergeSort()}>Merge Sort</button>\r\n              <button className=\"disabledbutton\" onClick={() => this.BubbleSort()}>Bubble Sort</button>\r\n              <button className=\"disabledbutton\" onClick={() => this.HeapSort()}>Heap Sort</button>\r\n              <button className=\"disabledbutton\" onClick={() => this.QuickSort()}>Quick Sort</button>\r\n              <button className=\"disabledbutton\" onClick={() => this.InsertionSort()}>Insertion Sort</button>\r\n              <button className=\"stopbutton\" onClick={() => this.StopRunning()}>Stop</button>\r\n          </div>\r\n          <div>\r\n            <label class=\"text\">Size &nbsp;</label>\r\n            <input \r\n            class=\"slider\"\r\n            id = \"size-slider\"\r\n            type=\"range\" \r\n            min=\"4\"\r\n            max=\"275\"\r\n            value={this.state.value}\r\n            onChange={this.onSizeSliderChange}>\r\n            </input>\r\n          </div>\r\n          <div>\r\n            <label class=\"text\">Speed</label>\r\n            <input \r\n            class=\"slider\"\r\n            type=\"range\" \r\n            min=\"1\"\r\n            max=\"1000\"\r\n            value={this.state.value}\r\n            onChange={this.onSpeedSliderChange}>\r\n            </input>\r\n          </div>\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n\r\n}\r\nfunction wait(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\nfunction getRandomNumber(min, max){\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport './NavbarStyles.css';\r\n\r\nconst Runtimes = props => (\r\n  <h1>RUNTIMES</h1>\r\n);\r\n  \r\nexport default Runtimes;","import React from \"react\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Sort from \"./components/Sort\";\r\nimport Runtimes from \"./components/Runtimes\";   \r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nfunction App()\r\n{\r\n  return (\r\n    <Router>\r\n    <div className=\"App\">\r\n      <Navbar></Navbar>\r\n      <Switch>\r\n          <Route path=\"/\" exact component={Sort} className=\"align\"/>\r\n          <Route path=\"/Sorting-Visualisation\" component={Sort} className=\"align\"/>\r\n          <Route path=\"/Compare-Runtimes\" component={Runtimes} className=\"align\"/>\r\n      </Switch>\r\n    </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}