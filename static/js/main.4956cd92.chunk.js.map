{"version":3,"sources":["components/Algorithms/heapsort.js","components/Algorithms/quicksort.js","components/Algorithms/insertionsort.js","components/Algorithms/mergesort.js","components/Array.js","components/Algorithms/bubblesort.js","components/ArrayContainer.js","components/Sort.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["animations","size","getHeapSortAnimations","array","length","i","Math","floor","maxHeap","push","swap","HeapSort","left","right","max","input","indexA","indexB","temp","getQuickSortAnimations","QuickSort","index","len","Partition","middle","pivot","j","getMergeSortAnimations","auxiliaryArray","slice","MergeSort","auxillaryArray","start","end","Merge","getInsertionSortAnimations","key","insertionSort","Array","props","defaultSortType","sortType","ChooseSortType","state","OGarray","isSorting","speed","handleSpeedSlider","bind","handleSortTypeButtons","e","this","setState","target","value","array1","array2","compareArrays","arrayBars","document","getElementsByName","shouldSort","InsertionSort","BubbleSort","swapped","a","b","getBubbleSortAnimations","forEach","bar","style","backgroundColor","wait","barOneIndex","barTwoIndex","barHeight","barOneStyle","barTwoStyle","height","FinishSortingAnimations","barOneHeight","keyHeight","tempPivotIndex","barTwoHeight","previousPivot","pivotIndex","parseInt","WindowWidth","ArraySize","maxheight","pixelwidth","window","innerWidth","ManageSorting","className","width","map","name","type","id","checked","onChange","min","React","Component","ms","Promise","resolve","setTimeout","ArrayContainer","arraycount","ArrayS","arr","Sort","calculateMaxArraySize","barlength","calculateBarLength","innerHeight","getRandomArray","handleSizeSlider","handleAddArray","handleResetArray","toggleSorting","event","onClick","WindowHeight","NumberOfArrays","maxlength","random","Main","updateWindowDimensions","addEventListener","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4956cd92.chunk.js","sourcesContent":["//Setting global animation and size variables so I don't have to pass them as parameters.\r\nlet animations, size;\r\nexport default function getHeapSortAnimations(array){\r\n    animations = []\r\n    size = array.length;\r\n    //Heapsort works by treating the array as a binary tree which is where a lot of odd numbers come from.\r\n    HeapSort(array);\r\n    return animations;\r\n}\r\nfunction HeapSort(array){\r\n    //You first build the max heap to get the largest value to the top of the heap.\r\n    //We start sorting from the highest node which is what i is set to.\r\n    for (let i = Math.floor(size / 2); i >= 0; i --){\r\n        maxHeap(array, i);\r\n    }   \r\n    //We then sort based on the last child element of the array and go backwards from there.\r\n    for (let i = array.length - 1; i > 0; i--){\r\n        animations.push([0, i, array[0], array[i]]);\r\n        swap(array, 0, i);\r\n        size--\r\n        maxHeap(array, 0);\r\n    }\r\n    return;\r\n}\r\n\r\n\r\n\r\n//This compares a parent and 2 children to make sure that they are in order for a max heap. \r\nfunction maxHeap(array, i) {\r\n    //Because we are representing a binary tree with an array, to find the left and right nodes \r\n    //we can multiply by 2 and add 1 and 2 respectively. Instead of doing an extra calculation,\r\n    //The right node will just be the left node + 1.\r\n    const left = 2 * i + 1\r\n    const right = left + 1\r\n    //The parent node\r\n    let max = i\r\n\r\n    //We now compare if the parent node is larger than its children.\r\n    //We also check that the already sorted nodes are left alone which is where the in bounds in checked.\r\n    if (left < size && array[left] > array[max]){\r\n        max = left\r\n    }\r\n\r\n    if (right < size && array[right] > array[max]){\r\n        max = right\r\n    }\r\n\r\n    //If if turns out that the parent node was larger than its children,\r\n    //We now need to swap them and then repeat this but the child now becomes the parent node.\r\n    //We repeat this to ensure the children's children are sorted. \r\n    if (max !== i) {\r\n        animations.push([i, max, array[i], array[max]]);\r\n        swap(array, i, max)\r\n        maxHeap(array, max)\r\n    }\r\n}\r\n\r\n//This just swaps two elements of an array using a temporary variable.\r\n//For some unknown reason, the [,][,] method that exists in javascript to swap these\r\n//(I used in quicksort line 47) didn't work here.\r\nfunction swap(input, indexA, indexB) {\r\n    const temp = input[indexA]\r\n    input[indexA] = input[indexB]\r\n    input[indexB] = temp\r\n}","let animations;\r\n\r\nexport default function getQuickSortAnimations(array){\r\n    animations = [];\r\n    QuickSort(array, 0, array.length-1)\r\n    return animations;\r\n}\r\n    \r\nfunction QuickSort(array, left = 0, right = array.length - 1) {\r\n    let len = array.length,index;\r\n    if(len > 1) {\r\n        //First a partition is made to organise where the pivot value is.\r\n      index = Partition(array, left, right)\r\n      if(left < index - 1) {\r\n        QuickSort(array, left, index - 1);\r\n      } \r\n      if(index < right) {\r\n        QuickSort(array, index, right);\r\n      }\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction Partition(array, left, right) {\r\n    //This sets up a pivot value to sort other values around.\r\n    let middle = Math.floor((right + left) / 2),\r\n        pivot = array[middle],\r\n        i = left,\r\n        j = right\r\n        animations.push([middle, pivot])\r\n    //Checks to make sure that the left value is smaller than the right value.\r\n    while(i <= j) {\r\n        //Compares the left value to the pivot value, increases it if it is smaller than the pivot.\r\n        while(array[i] < pivot) {\r\n            animations.push([i]);\r\n            i++\r\n        }\r\n        //Compares right value is larger than the pivot value, decreases it if it smaller than the pivot.\r\n        while(array[j] > pivot) {\r\n            animations.push([j]);\r\n            j--\r\n        }\r\n        //This will swap elements i and j which have been selected from the above process.\r\n        if(i <= j) {\r\n            animations.push([i, j, array[i], array[j]]); \r\n            //Swaps elements of the array.\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n            i++\r\n            j--\r\n        }\r\n    }\r\n    return i;\r\n}","let animations;\r\nexport default function getInsertionSortAnimations(array){\r\n    animations = [];\r\n    insertionSort(array);\r\n    return animations;\r\n}\r\n    \r\nfunction insertionSort(array){\r\n    let size = array.length;\r\n    for (let i = 1; i < size; i++){\r\n        //This assigns indexes i, j and the values of them. \r\n        let key = array[i];\r\n        let j = i - 1;\r\n        //This for each element, keeps moving left until it has found the place \r\n        //where it needs to be inserted and then it inserts it there.\r\n        while (j >= 0 && array[j] > key){\r\n            animations.push([j, i, array[j]]);\r\n            array[j + 1] = array[j];\r\n            j-- ;\r\n        }\r\n        animations.push([j+1, key])\r\n        array[j + 1] = key;\r\n    }\r\n    return array;\r\n};","export default function getMergeSortAnimations(array){\r\n    //By using array.slice(), I assign the auxiliary array to a copy of the array.\r\n    //I then use this to sort on but I can still have a copy of the original array.\r\n    const auxiliaryArray = array.slice();\r\n    const animations = []\r\n    if (array.length <= 1) return array;\r\n    MergeSort(array, auxiliaryArray, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\nfunction MergeSort(array, auxillaryArray, start, end, animations){\r\n    if(start === end) return;\r\n    const middle = Math.floor((start + end)/2);\r\n    //I first run merge sort recursively on the first half of the array.\r\n    MergeSort(auxillaryArray, array, start, middle, animations);\r\n    //Then run merge sort recursively on the second half of the array.\r\n    MergeSort(auxillaryArray, array, middle + 1, end, animations);\r\n    //Then use the auxillary array in place of the array\r\n    Merge(array, auxillaryArray, start, end, middle, animations);\r\n}\r\nfunction Merge(array, auxillaryArray, start, end, middle, animations){\r\n    let left = start;\r\n    let right = middle + 1;\r\n    let index = start;\r\n    //This goes from the left and right pillar and merges them together by overriding the array using values from the auxillary array.\r\n    while(left <= middle && right <= end){\r\n        if(auxillaryArray[left] < auxillaryArray[right]){\r\n            animations.push([left, index, auxillaryArray[left]])\r\n            array[index] = auxillaryArray[left];\r\n            left++;\r\n        }else{\r\n            animations.push([right, index, auxillaryArray[right]])\r\n            array[index] = auxillaryArray[right];\r\n            right++;\r\n        }\r\n        index++;\r\n    }\r\n    //When doing the above step there will be left over values where one pillar has reached its end although the other hasn't \r\n    //This is to push the other pillar to the end and overwrite those values.\r\n    while(left <= middle){\r\n        animations.push([left, index,auxillaryArray[left]])\r\n        array[index] = auxillaryArray[left];\r\n        left++;\r\n        index++;\r\n    }\r\n    while(right <= end){\r\n        animations.push([right, index, auxillaryArray[right]])\r\n        array[index] = auxillaryArray[right];\r\n        right++;\r\n        index++;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport './Styles/Styles.css';\r\nimport getBubbleSortAnimations from './Algorithms/bubblesort';\r\nimport getHeapSortAnimations from './Algorithms/heapsort';\r\nimport getQuickSortAnimations from './Algorithms/quicksort';\r\nimport getMergeSortAnimations from './Algorithms/mergesort';\r\nimport getInsertionSortAnimations from './Algorithms/insertionsort';\r\n\r\nconst primaryColour = \"#3DCBE0\"; //blue\r\nconst selectedColour = \"#7662F5\"; //purple\r\nconst successColour = \"#43F04F\"; //green\r\nconst failedColour = \"#FA5E3F\"; //red\r\nconst pivotColour = \"#198494\"; //dark blue\r\n\r\nexport default class Array extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const defaultSortType = ChooseSortType(this.props.index);\r\n        this.state = {\r\n            OGarray: this.props.array,\r\n            array: this.props.array,\r\n            isSorting: false,\r\n            sortType: defaultSortType,\r\n            speed: 0,\r\n        }\r\n        this.handleSpeedSlider = this.handleSpeedSlider.bind(this);\r\n        this.handleSortTypeButtons = this.handleSortTypeButtons.bind(this);\r\n    }\r\n\r\n    handleSpeedSlider(e) {\r\n        this.setState({\r\n            speed: 1000 - e.target.value,\r\n        })\r\n    }\r\n\r\n    ManageSorting() {\r\n        if(!compareArrays(this.state.OGarray, this.props.array)){\r\n            this.setState({\r\n                OGarray: this.props.array,\r\n                array: this.props.array,\r\n            })\r\n        }\r\n        const array = this.state.array.slice();\r\n        let arrayBars = document.getElementsByName(`array${this.props.index}`)\r\n        if(this.props.shouldSort && !this.state.isSorting) {\r\n            this.setState({ isSorting: true });\r\n            switch(this.state.sortType){\r\n                case \"merge\":\r\n                    this.MergeSort(getMergeSortAnimations(array), arrayBars);\r\n                    break;\r\n                case \"insertion\":\r\n                    this.InsertionSort(getInsertionSortAnimations(array), arrayBars);\r\n                    break;\r\n                case \"quick\":\r\n                    this.QuickSort(getQuickSortAnimations(array), arrayBars);\r\n                    break;\r\n                case \"bubble\":\r\n                    this.BubbleSort(getBubbleSortAnimations(array), arrayBars);\r\n                    break;\r\n                case \"heap\":\r\n                    this.HeapSort(getHeapSortAnimations(array), arrayBars);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        else if(!this.props.shouldSort && this.state.isSorting) {\r\n            this.setState({ isSorting: false });\r\n            return;\r\n        }\r\n\r\n    }\r\n    handleSortTypeButtons(e) {\r\n        this.setState({\r\n            sortType: e.target.value,\r\n        })\r\n    }\r\n    async FinishSortingAnimations(arrayBars) {\r\n        arrayBars.forEach(bar => {\r\n            bar.style.backgroundColor = successColour;\r\n        });\r\n        await wait(1000);\r\n        arrayBars.forEach(bar => {\r\n            bar.style.backgroundColor = primaryColour;\r\n        });\r\n    }\r\n    async MergeSort(animations, arrayBars) {\r\n        let array = this.state.array.slice();\r\n        const length = animations.length;\r\n        for(let i = 0; i < length; i++){\r\n          if(this.props.shouldSort){\r\n            let [barOneIndex, barTwoIndex, barHeight] = animations[i];\r\n            if(barOneIndex === this.props.array.length) barOneIndex--;\r\n            if(barTwoIndex === this.props.array.length) barTwoIndex--;\r\n\r\n            let barOneStyle = arrayBars[barOneIndex].style;\r\n            let barTwoStyle = arrayBars[barTwoIndex].style;\r\n            barOneStyle.backgroundColor = selectedColour;\r\n            barTwoStyle.backgroundColor = selectedColour;\r\n            await wait(this.state.speed);\r\n\r\n            barTwoStyle.height = `${barHeight}px`;\r\n            array[barTwoIndex] = barHeight;\r\n            await wait(this.state.speed);\r\n            barOneStyle.backgroundColor = primaryColour;\r\n            barTwoStyle.backgroundColor = primaryColour;\r\n          }\r\n          else{\r\n            return;\r\n          }\r\n          this.setState({array: array});\r\n        }\r\n        this.FinishSortingAnimations(arrayBars);\r\n    }\r\n\r\n    async InsertionSort(animations, arrayBars) {\r\n        let array = this.state.array.slice();\r\n        const length = animations.length;\r\n        for(let i = 0; i < length; i++){\r\n          if(this.props.shouldSort){\r\n            if(animations[i].length === 3){\r\n              let [barOneIndex, barTwoIndex, barOneHeight] = animations[i];\r\n              arrayBars[barOneIndex].style.backgroundColor = selectedColour;\r\n              arrayBars[barTwoIndex].style.backgroundColor = selectedColour;\r\n\r\n              arrayBars[barOneIndex+1].style.height = `${barOneHeight}px`;\r\n              array[barOneIndex+1] = barOneHeight;\r\n\r\n              await wait(this.state.speed);\r\n              arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n              arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\r\n            }\r\n            else{\r\n              let [barOneIndex, keyHeight] = animations[i];\r\n              arrayBars[barOneIndex].style.height = `${keyHeight}px`;\r\n              array[barOneIndex] = keyHeight;\r\n              await wait(this.state.speed);\r\n            }\r\n          }\r\n          else{\r\n            return;\r\n          }\r\n          this.setState({array: array});\r\n        }\r\n        this.FinishSortingAnimations(arrayBars);\r\n    }\r\n    async QuickSort(animations, arrayBars) {\r\n        let array = this.state.array.slice();\r\n        const length = animations.length;\r\n        let tempPivotIndex = 0;\r\n        for(let i = 0; i < length; i++){\r\n          if(this.props.shouldSort){\r\n            if(animations[i].length === 4){\r\n              let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i];  \r\n\r\n              arrayBars[barOneIndex].style.height = `${barTwoHeight}px`;\r\n              array[barOneIndex] = barTwoHeight;\r\n\r\n              arrayBars[barTwoIndex].style.height = `${barOneHeight}px`;\r\n              array[barTwoIndex] = barOneHeight;\r\n\r\n              arrayBars[barOneIndex].style.backgroundColor = successColour;\r\n              arrayBars[barTwoIndex].style.backgroundColor = successColour;\r\n              await wait(this.state.speed);\r\n              arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n              arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\r\n            }\r\n            else if(animations[i].length === 2){\r\n              if(i !== 0){\r\n                let [previousPivot] = animations[i-1];\r\n                arrayBars[previousPivot].style.backgroundColor = primaryColour;\r\n              }\r\n              let [pivotIndex] = animations[i];\r\n              arrayBars[pivotIndex].style.backgroundColor = pivotColour;\r\n              tempPivotIndex = pivotIndex;\r\n              await wait(this.state.speed);\r\n            }\r\n            else{\r\n              let [barOneIndex] = animations[i];\r\n              arrayBars[barOneIndex].style.backgroundColor = selectedColour;\r\n              await wait(this.state.speed);\r\n              arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n            }  \r\n          }\r\n          else{\r\n            arrayBars[tempPivotIndex].style.backgroundColor = primaryColour;\r\n            return;\r\n          }\r\n          this.setState({ array: array });\r\n        }\r\n        this.FinishSortingAnimations(arrayBars);\r\n    }\r\n    async BubbleSort(animations, arrayBars) {\r\n        let array = this.state.array.slice();\r\n        const length = animations.length;\r\n        for(let i = 0; i < length; i++){\r\n            if(this.props.shouldSort){\r\n                let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i]\r\n                let barOneStyle = arrayBars[barOneIndex].style;\r\n                let barTwoStyle = arrayBars[barTwoIndex].style;\r\n                barOneStyle.backgroundColor = selectedColour;\r\n                barTwoStyle.backgroundColor = selectedColour;\r\n                await wait(this.state.speed);\r\n\r\n                if(parseInt(barOneHeight) > parseInt(barTwoHeight)){\r\n                    barOneStyle.height = `${barTwoHeight}px`;\r\n                    array[barOneIndex] = barTwoHeight;\r\n\r\n                    barTwoStyle.height = `${barOneHeight}px`;\r\n                    array[barTwoIndex] = barOneHeight;\r\n                    \r\n                    barOneStyle.backgroundColor = successColour;\r\n                    barTwoStyle.backgroundColor = successColour;\r\n                }else{\r\n                    barOneStyle.backgroundColor = failedColour;\r\n                    barTwoStyle.backgroundColor = failedColour;\r\n                }\r\n                await wait(this.state.speed);\r\n                barOneStyle.backgroundColor = primaryColour;\r\n                barTwoStyle.backgroundColor = primaryColour;\r\n            }\r\n            else{\r\n                return;\r\n            }\r\n            this.setState({ array: array });\r\n        }\r\n        this.FinishSortingAnimations(arrayBars);\r\n    }\r\n    async HeapSort(animations, arrayBars) {\r\n        let array = this.state.array.slice();\r\n        const length = animations.length;\r\n        for(let i = 0; i < length; i++){\r\n          if(this.props.shouldSort){\r\n            let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i];   \r\n            arrayBars[barOneIndex].style.backgroundColor = selectedColour;\r\n            arrayBars[barTwoIndex].style.backgroundColor = selectedColour;\r\n            await wait(this.state.speed);\r\n\r\n            arrayBars[barOneIndex].style.height = `${barTwoHeight}px`;  \r\n            array[barOneIndex] = barTwoHeight;\r\n\r\n            arrayBars[barTwoIndex].style.height = `${barOneHeight}px`;\r\n            array[barTwoIndex] = barOneHeight;\r\n            \r\n            arrayBars[barOneIndex].style.backgroundColor = successColour;\r\n            arrayBars[barTwoIndex].style.backgroundColor = successColour;\r\n            await wait(this.state.speed);\r\n            arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n            arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\r\n          }\r\n          else{\r\n            return;\r\n          }\r\n          this.setState({ array: array });\r\n        }\r\n        this.FinishSortingAnimations(arrayBars);\r\n    }\r\n\r\n    render() {\r\n        const array = this.state.array;\r\n        const maxheight = this.props.maxheight;\r\n        const pixelwidth = calculatePixelWidth(window.innerWidth,array.length);\r\n        this.ManageSorting();\r\n        return(\r\n            <div>\r\n                <div className=\"transparent-array-bar\"\r\n                     style={{\r\n                         height: `${maxheight}px`,\r\n                         width: `${1}px`,\r\n                         backgroundColor: `transparent`,\r\n                     }}>\r\n\r\n                </div>\r\n\r\n                {array.map((value, index) => (\r\n                    <div className=\"array-bar\"\r\n                         name={`array${this.props.index}`}\r\n                         key={index}\r\n                         style={{\r\n                         height: `${value}px`,\r\n                         width: `${pixelwidth}px`,\r\n                }}></div>))}\r\n\r\n                <div className=\"sort-button-container\">\r\n                    <label className=\"radio-label\">\r\n                        <input type=\"radio\" className=\"radio-button\" \r\n                            id=\"merge\" \r\n                            value=\"merge\"\r\n                            checked={this.state.sortType === \"merge\"} \r\n                            name={`${this.props.index}`} \r\n                            onChange={this.handleSortTypeButtons}/>\r\n                        Merge\r\n                    </label>\r\n                    <label className=\"radio-label\">\r\n                        <input type=\"radio\" \r\n                            className=\"radio-button\"\r\n                            id=\"insertion\" \r\n                            value=\"insertion\" \r\n                            checked={this.state.sortType === \"insertion\"} \r\n                            name={`${this.props.index}`} \r\n                            onChange={this.handleSortTypeButtons}/>\r\n                        Insertion\r\n                    </label>\r\n                    \r\n                    <label className=\"radio-label\">\r\n                    <input type=\"radio\" className=\"radio-button\"\r\n                           id=\"quick\" \r\n                           value=\"quick\" \r\n                           checked={this.state.sortType === \"quick\"} \r\n                           name={`${this.props.index}`} \r\n                           onChange={this.handleSortTypeButtons}/>\r\n                        Quick\r\n                    </label>\r\n\r\n                    <label className=\"radio-label\">\r\n                    <input type=\"radio\" className=\"radio-button\"\r\n                           id=\"bubble\" \r\n                           value=\"bubble\" \r\n                           checked={this.state.sortType === \"bubble\"} \r\n                           name={`${this.props.index}`} \r\n                           onChange={this.handleSortTypeButtons}/>\r\n                        Bubble\r\n                    </label>\r\n\r\n                    <label className=\"radio-label\">\r\n                    <input type=\"radio\" className=\"radio-button\"\r\n                           id=\"heap\" \r\n                           value=\"heap\" \r\n                           checked={this.state.sortType === \"heap\"} \r\n                           name={`${this.props.index}`} \r\n                           onChange={this.handleSortTypeButtons}/>\r\n                        Heap\r\n                    </label>\r\n\r\n                    <label className=\"slider-label\">\r\n                        <input className=\"speed-slider\"\r\n                            type=\"range\" \r\n                            id=\"speed\"\r\n                            min=\"0\"\r\n                            max=\"1000\"\r\n                            value={1000 - this.state.speed}\r\n                            onChange={(e) => this.handleSpeedSlider(e)}/>\r\n                        Speed\r\n                    </label>\r\n                   \r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nfunction ChooseSortType(index) {\r\n    let sortType;\r\n    switch (index) {\r\n        case 0:\r\n            sortType = \"merge\";\r\n            break;\r\n        case 1:\r\n            sortType = \"insertion\";\r\n            break;\r\n        case 2:\r\n            sortType = \"quick\";\r\n            break;\r\n        case 3:\r\n            sortType = \"bubble\";\r\n            break;\r\n        case 4:\r\n            sortType = \"heap\";\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return sortType;\r\n}\r\nfunction compareArrays(array1, array2){\r\n    if(array1.length !== array2.length){\r\n        return false;\r\n    }\r\n    for(let i = 0; i < array1.length; i++){\r\n        if(array1[i] !== array2[i]){\r\n            return false\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction calculatePixelWidth(WindowWidth, ArraySize) {\r\n    return (WindowWidth*0.36/ArraySize);\r\n}\r\nfunction wait(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }","export default function getBubbleSortAnimations(array){\r\n    //Initialise the animations array so that it can be returned.\r\n    let animations = [];\r\n    const arrayLength = array.length;\r\n    //Assign swapped to a variable so i\r\n    let swapped;\r\n    //This starts from the end of the array.\r\n    for (let i = arrayLength; i > 0; i--) {\r\n        swapped = 0;\r\n        //This increments the end of the array so that it doesn't check already sorted values.\r\n        for ( let j = 1; j < i; j++ ) {\r\n        //Assigning the values of elements that are being compared.\r\n        const a = array[j-1];\r\n        const b = array[j];\r\n        //sending this information to the animation array so that the program can do the same calculation below.\r\n        animations.push([j-1, j, a, b]);\r\n            if (a > b) {\r\n              //swapping the values if the left pillar is smaller than the right pillar \r\n              array[j-1] = b;\r\n              array[j] = a;\r\n              swapped = j;\r\n            }\r\n        }\r\n        //If 0 then it will appear as false and break out of the loop because the swapped is the index of the swap \r\n        if (!swapped) {\r\n            break;\r\n        }else {\r\n            i = swapped + 1;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n    \r\n","import React from \"react\";\r\nimport './Styles/Styles.css';\r\nimport Array from './Array';\r\n\r\nexport default class ArrayContainer extends React.Component {\r\n   \r\n    render() {\r\n        const arraycount = this.props.arraycount;\r\n        let ArrayS = [];\r\n        for(let i = 0; i < arraycount; i++){\r\n            ArrayS.push(\r\n            <Array array={this.props.array}\r\n                   maxheight={this.props.maxheight} \r\n                   index={i}\r\n                   shouldSort={this.props.isSorting}/>\r\n            );\r\n        }\r\n        return(\r\n            ArrayS.map((arr, index) => (\r\n            <div className=\"array\" \r\n                key={index}>\r\n                {arr}\r\n            </div>\r\n            )))\r\n    }\r\n}\r\n\r\n  ","import React from \"react\";\r\nimport ArrayContainer from './ArrayContainer';\r\nimport './Styles/Styles.css';\r\n\r\nexport default class Sort extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        const size = calculateMaxArraySize(window.innerWidth);\r\n        const barlength = calculateBarLength(window.innerHeight, 3)\r\n        this.state = {\r\n            isSorting: false,\r\n            size: size,\r\n            barlength: barlength,\r\n            array: getRandomArray(size, barlength),\r\n            arraycount: 3,\r\n        }\r\n        this.handleSizeSlider = this.handleSizeSlider.bind(this);\r\n        this.handleAddArray = this.handleAddArray.bind(this);\r\n        this.handleResetArray = this.handleResetArray.bind(this);\r\n        this.toggleSorting = this.toggleSorting.bind(this);\r\n\r\n    }\r\n    toggleSorting() {\r\n        this.setState((state) => ({\r\n            isSorting: !state.isSorting,\r\n        }));\r\n    }\r\n    handleSizeSlider(event) {\r\n        const size = event.target.value;\r\n        this.setState((state) => ({\r\n            isSorting: false,\r\n            size: size,\r\n            array: getRandomArray(size, state.barlength)\r\n        }))\r\n    }\r\n\r\n    handleResetArray() {\r\n        const arr = getRandomArray(this.state.size, this.state.barlength)\r\n        this.setState({\r\n            isSorting: false,\r\n            array: arr,\r\n        })\r\n    }\r\n\r\n   \r\n    handleAddArray(e) {\r\n        let arraycount = this.state.arraycount;\r\n        if(arraycount < 5 && e.target.value === \"+\") {\r\n            arraycount++;\r\n        }\r\n        else if(arraycount > 1 && e.target.value === \"-\") {\r\n            arraycount--;\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n        const barlength = calculateBarLength(window.innerHeight, arraycount)\r\n        this.setState({\r\n            isSorting: false,\r\n            arraycount: arraycount,\r\n            barlength: barlength,\r\n            array: getRandomArray(this.state.size, barlength)\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div>\r\n                <div className=\"array-container\">\r\n                    <ArrayContainer\r\n                        arraycount={this.state.arraycount} \r\n                        array={this.state.array}\r\n                        maxheight={this.state.barlength}\r\n                        isSorting={this.state.isSorting}/>\r\n                </div>\r\n\r\n                <div className=\"button-container\">\r\n                    <button className=\"medium-button\" \r\n                            value=\"-\" \r\n                            onClick={(e) => this.handleAddArray(e)}>-</button>\r\n\r\n                    <button className=\"medium-button\" \r\n                        onClick={this.handleResetArray}>⟳</button>\r\n\r\n                    <button className=\"medium-button\" \r\n                        value=\"+\"\r\n                         onClick={(e) => this.handleAddArray(e)}>+</button>\r\n\r\n                    <button onClick={this.toggleSorting} \r\n                            className=\"main-button\"\r\n                            style={{\r\n                                backgroundColor: !this.state.isSorting ? '#3DCBE0' : '#FA5E3F'\r\n                            }}>\r\n                        {!this.state.isSorting ? 'Sort' : 'Stop'}\r\n                    </button>\r\n               </div>\r\n               \r\n               <div className=\"slider-container\">\r\n                <label className=\"size-slider-label\">\r\n                        <input className=\"size-slider\"\r\n                            type=\"range\" \r\n                            id=\"size\" \r\n                            min=\"4\"\r\n                            max={calculateMaxArraySize(window.innerWidth)}\r\n                            value={this.state.size}\r\n                            onChange={this.handleSizeSlider}/>\r\n                        Size\r\n                    </label>\r\n                </div>\r\n\r\n                    \r\n            </div>\r\n        )\r\n    }\r\n}\r\nfunction calculateBarLength(WindowHeight, NumberOfArrays) {\r\n    return Math.floor((WindowHeight*0.64)/NumberOfArrays);\r\n}\r\n\r\nfunction calculateMaxArraySize(WindowWidth) {\r\n    return Math.floor(WindowWidth * 0.147);\r\n}\r\n\r\nfunction getRandomArray(size, maxlength) { \r\n    //This generates a random array.\r\n    let array = [];\r\n    for (let i = 0; i < size-1; i++){\r\n        array.push(getRandomNumber(10, maxlength));\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction getRandomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\r\nimport Sort from './Sort'\r\nimport './Styles/Styles.css';\r\n\r\nexport default class Main extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener(\"resize\", this.updateWindowDimensions.bind(this));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateWindowDimensions.bind(this));\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"page-container\">\r\n                <Sort/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n//This imports my predefined components from their respective files.\r\nimport Main from \"./components/Main\";\r\n\r\nfunction App()\r\n{\r\n  return (\r\n    <Main/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//This renders whatever is in the App.js file\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}