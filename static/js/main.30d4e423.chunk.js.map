{"version":3,"sources":["logo.svg","components/Algorithms/heapsort.js","components/Algorithms/quicksort.js","components/Algorithms/bubblesort.js","components/Algorithms/mergesort.js","components/Sort.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","animations","size","getBubbleSortAnimations","array","swapped","i","length","j","a","b","push","getHeapSortAnimations","Math","floor","maxHeap","swap","HeapSort","console","log","left","right","max","input","indexA","indexB","temp","getQuickSortAnimations","QuickSort","index","len","Partition","middle","pivot","getMergeSortAnimations","auxiliaryArray","slice","MergeSort","auxillaryArray","start","end","Merge","pixelwidth","width","height","animationSpeed","barColour","Sort","properties","state","updateWindowDimensions","bind","onSizeSliderChange","onSpeedSliderChange","window","addEventListener","this","resetArray","removeEventListener","innerWidth","innerHeight","forceUpdate","wait","arrayBars","document","getElementsByClassName","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","backgroundColor","parseInt","AnimationFinished","barHeight","barOneHeight","barTwoHeight","previousPivot","pivotIndex","min","random","setState","counter","event","target","value","className","map","key","onClick","BubbleSort","InsertionSort","class","type","onChange","React","Component","ms","Promise","resolve","setTimeout","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.30d4e423.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","let animations, size;\r\nexport default function getHeapSortAnimations(array){\r\n    animations = []\r\n    size = array.length;\r\n    HeapSort(array);\r\n    console.log(animations);\r\n    console.log(array);\r\n    console.log(size);\r\n    return animations;\r\n}\r\nfunction HeapSort(array){\r\n    for (let i = Math.floor(size / 2); i >= 0; i --){\r\n        maxHeap(array, i);\r\n    }\r\n    for (let i = array.length - 1; i > 0; i--){\r\n        animations.push([0, i, array[0], array[i]]);\r\n        swap(array, 0, i);\r\n        size--\r\n        maxHeap(array, 0);\r\n    }\r\n    return;\r\n}\r\nfunction maxHeap(array, i) {\r\n    const left = 2 * i + 1\r\n    const right = 2 * i + 2\r\n    let max = i\r\n\r\n    if (left < size && array[left] > array[max]){\r\n        max = left\r\n    }\r\n\r\n    if (right < size && array[right] > array[max]){\r\n        max = right\r\n    }\r\n\r\n    if (max != i) {\r\n        animations.push([i, max, array[i], array[max]]);\r\n        swap(array, i, max)\r\n        maxHeap(array, max)\r\n    }\r\n}\r\n\r\nfunction swap(input, indexA, indexB) {\r\n    const temp = input[indexA]\r\n    input[indexA] = input[indexB]\r\n    input[indexB] = temp\r\n}","let animations;\r\n\r\nexport default function getQuickSortAnimations(array){\r\n    animations = [];\r\n    QuickSort(array, 0, array.length-1)\r\n    console.log(array);\r\n    return animations;\r\n}\r\n    \r\nfunction QuickSort(array, left = 0, right = array.length - 1) {\r\n    let len = array.length,index;\r\n    if(len > 1) {\r\n      index = Partition(array, left, right)\r\n      if(left < index - 1) {\r\n        QuickSort(array, left, index - 1);\r\n      } \r\n      if(index < right) {\r\n        QuickSort(array, index, right);\r\n      }\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction Partition(array, left, right) {\r\n    let middle = Math.floor((right + left) / 2),\r\n        pivot = array[middle],\r\n        i = left,\r\n        j = right\r\n        animations.push([middle, pivot])\r\n    while(i <= j) {\r\n        while(array[i] < pivot) {\r\n            animations.push([i]);\r\n            i++\r\n        }\r\n        while(array[j] > pivot) {\r\n            animations.push([j]);\r\n            j--\r\n        }\r\n        \r\n        if(i <= j) {\r\n            animations.push([i, j, array[i], array[j]]); \r\n            [array[i], array[j]] = [array[j], array[i]];\r\n            i++\r\n            j--\r\n        }\r\n    }\r\n    return i;\r\n}","export default function getBubbleSortAnimations(array){\r\n    let animations = [];\r\n    const arrayLength = array.length;\r\n    let swapped;\r\n    for (let i=arrayLength; i>0; i--) {\r\n        swapped = 0;\r\n        for ( let j=1; j<i; j++ ) {\r\n        const a = array[j-1];\r\n        const b = array[j];\r\n        animations.push([j-1, j]);\r\n            if (a > b) {\r\n              array[j-1] = b;\r\n              array[j] = a;\r\n              swapped = j;\r\n            }\r\n        }\r\n        if (!swapped) {\r\n            break;\r\n        }else {\r\n            i = swapped + 1;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n    \r\n","export default function getMergeSortAnimations(array){\r\n    const auxiliaryArray = array.slice();\r\n    const animations = []\r\n    if (array.length <= 1) return array;\r\n    MergeSort(array, auxiliaryArray, 0, array.length - 1, animations);\r\n    console.log(animations);\r\n    return animations;\r\n}\r\nfunction MergeSort(array, auxillaryArray, start, end, animations){\r\n    if(start === end) return;\r\n    const middle = Math.floor((start + end)/2);\r\n    MergeSort(auxillaryArray, array, start, middle, animations);\r\n    MergeSort(auxillaryArray, array, middle + 1, end, animations);\r\n    Merge(array, auxillaryArray, start, end, middle, animations);\r\n}\r\nfunction Merge(array, auxillaryArray, start, end, middle, animations){\r\n    let left = start;\r\n    let right = middle + 1;\r\n    let index = start;\r\n    console.log(array.length);\r\n    while(left <= middle && right <= end){\r\n        if(auxillaryArray[left] < auxillaryArray[right]){\r\n            animations.push([left, index, auxillaryArray[left]])\r\n            array[index] = auxillaryArray[left];\r\n            left++;\r\n        }else{\r\n            animations.push([right, index, auxillaryArray[right]])\r\n            array[index] = auxillaryArray[right];\r\n            right++;\r\n        }\r\n        index++;\r\n    }\r\n    while(left <= middle){\r\n        animations.push([left, index,auxillaryArray[left]])\r\n        array[index] = auxillaryArray[left];\r\n        left++;\r\n        index++;\r\n    }\r\n    while(right <= end){\r\n        animations.push([right, index, auxillaryArray[right]])\r\n        array[index] = auxillaryArray[right];\r\n        right++;\r\n        index++;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport './styles.css';\r\nimport getBubbleSortAnimations from './Algorithms/bubblesort';\r\nimport getHeapSortAnimations from './Algorithms/heapsort';\r\nimport getQuickSortAnimations from './Algorithms/quicksort';\r\nimport getMergeSortAnimations from './Algorithms/mergesort';\r\nimport getInsertionSortAnimations from './Algorithms/insertionsort';\r\n\r\nconst primaryColour = \"#70b8c7\"; //Air Superiority blue\r\nconst selectedColour = \"#383683\"; //Purple\r\nconst successColour = \"#97DB4F\"; //Inchworm green\r\nconst failedColour = \"#D64933\"; //Cinnabar\r\nconst backgroundColour = \"FFFFFF\";\r\nlet barColour = primaryColour;\r\nlet size, pixelwidth, width, height, animationSpeed;\r\n\r\nexport default class Sort extends React.Component{\r\n  constructor(properties){\r\n    super(properties);\r\n    this.state = { array: []};\r\n\r\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    this.onSizeSliderChange = this.onSizeSliderChange.bind(this);\r\n    this.onSpeedSliderChange = this.onSpeedSliderChange.bind(this);\r\n  }\r\n  //On startup, this is what runs.\r\n  componentDidMount(){\r\n    window.addEventListener('resize', this.updateWindowDimensions);\r\n    this.updateWindowDimensions();\r\n    size = 100;\r\n    animationSpeed = 100;\r\n    pixelwidth = Math.floor((width/(size*2)));\r\n    this.resetArray();\r\n  }\r\n  //On closing, this is what runs\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateWindowDimensions);\r\n  }\r\n  //This is so that *hopefully* this will work on any sized screen as the compenents will be generated based on screen size\r\n  updateWindowDimensions() {\r\n    width =  (window.innerWidth*(0.9));\r\n    height = (window.innerHeight*(0.9));\r\n  }\r\n  async AnimationFinished(){\r\n    barColour = successColour;\r\n    this.forceUpdate();\r\n    await wait(1000);\r\n    barColour = primaryColour;\r\n    this.forceUpdate();\r\n\r\n  }\r\n  //Instead of returning a sorted array, these algorithms sort the array but return\r\n  //an array of the order in which the elements were sorted giving an animation array.\r\n  //This allows for features such as pausing and playing to be added with more ease.\r\n  async BubbleSort(){\r\n    let animations = getBubbleSortAnimations(this.state.array.slice());\r\n    const size = animations.length;\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for(let i=0;i<size;i++){\r\n      let [barOneIndex, barTwoIndex] = animations[i]\r\n\r\n      let barOneStyle = arrayBars[barOneIndex].style;\r\n      let barTwoStyle = arrayBars[barTwoIndex].style;\r\n\r\n      barOneStyle.backgroundColor = selectedColour;\r\n      barTwoStyle.backgroundColor = selectedColour;\r\n      await wait(animationSpeed);\r\n\r\n      if(parseInt(arrayBars[barOneIndex].style.height) > parseInt(arrayBars[barTwoIndex].style.height)){\r\n\r\n        let temp = arrayBars[barTwoIndex].style.height;\r\n        arrayBars[barTwoIndex].style.height = arrayBars[barOneIndex].style.height;\r\n        arrayBars[barOneIndex].style.height = temp;\r\n\r\n        barOneStyle.backgroundColor = successColour;\r\n        barTwoStyle.backgroundColor = successColour;\r\n        await wait(animationSpeed);\r\n      }else{\r\n        barOneStyle.backgroundColor = failedColour;\r\n        barTwoStyle.backgroundColor = failedColour;\r\n        await wait(animationSpeed);\r\n      }\r\n      barOneStyle.backgroundColor = primaryColour;\r\n      barTwoStyle.backgroundColor = primaryColour;\r\n    }\r\n    this.AnimationFinished();\r\n  }\r\n\r\n  async MergeSort(){\r\n    let animations = getMergeSortAnimations(this.state.array.slice());\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    const length = animations.length;\r\n    for(let i = 0; i < length; i++){\r\n      let [barOneIndex, barTwoIndex, barHeight] = animations[i];\r\n      if(barOneIndex === size) barOneIndex--;\r\n      if(barTwoIndex === size) barTwoIndex--;\r\n\r\n      let barOneStyle = arrayBars[barOneIndex].style;\r\n      let barTwoStyle = arrayBars[barTwoIndex].style;\r\n      barOneStyle.backgroundColor = selectedColour;\r\n      barTwoStyle.backgroundColor = selectedColour;\r\n      await wait(animationSpeed);\r\n      arrayBars[barTwoIndex].style.height = `${barHeight}px`;\r\n      await wait(animationSpeed);\r\n      barOneStyle.backgroundColor = primaryColour;\r\n      barTwoStyle.backgroundColor = primaryColour;\r\n      \r\n    }\r\n    await this.AnimationFinished();\r\n  }\r\n\r\n  async HeapSort(){\r\n    let animations = getHeapSortAnimations(this.state.array.slice());\r\n    const length = animations.length;\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    for(let i = 0; i < length; i++){\r\n      let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i];   \r\n      arrayBars[barOneIndex].style.backgroundColor = selectedColour;\r\n      arrayBars[barTwoIndex].style.backgroundColor = selectedColour;\r\n      await wait(animationSpeed);\r\n      arrayBars[barOneIndex].style.height = `${barTwoHeight}px`;\r\n      arrayBars[barTwoIndex].style.height = `${barOneHeight}px`;\r\n      arrayBars[barOneIndex].style.backgroundColor = successColour;\r\n      arrayBars[barTwoIndex].style.backgroundColor = successColour;\r\n      await wait(animationSpeed);\r\n      arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n      arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\r\n    }\r\n    await this.AnimationFinished();\r\n  }\r\n\r\n  async QuickSort(){\r\n    let animations = getQuickSortAnimations(this.state.array.slice());\r\n    const length = animations.length;\r\n    let arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    console.log(animations);\r\n    for(let i = 0; i < length; i++){\r\n      if(animations[i].length === 4){\r\n        let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i];   \r\n        arrayBars[barOneIndex].style.height = `${barTwoHeight}px`;\r\n        arrayBars[barTwoIndex].style.height = `${barOneHeight}px`;\r\n        arrayBars[barOneIndex].style.backgroundColor = successColour;\r\n        arrayBars[barTwoIndex].style.backgroundColor = successColour;\r\n        await wait(animationSpeed);\r\n        arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n        arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\r\n      }\r\n      else if(animations[i].length === 2){\r\n        if(i !== 0){\r\n          let [previousPivot, notpivot] = animations[i-1];\r\n          arrayBars[previousPivot].style.backgroundColor = primaryColour;\r\n        }\r\n        let [pivotIndex, pivot] = animations[i];\r\n        arrayBars[pivotIndex].style.backgroundColor = selectedColour;\r\n        await wait(animationSpeed);\r\n      }\r\n      else{\r\n        let [barOneIndex] = animations[i];\r\n        arrayBars[barOneIndex].style.backgroundColor = selectedColour;\r\n        await wait(animationSpeed);\r\n        arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n      }\r\n  \r\n    }\r\n    await this.AnimationFinished();\r\n  }\r\n  async InsertionSort(){\r\n  }\r\n  \r\n  resetArray(){\r\n    let array = [];\r\n    for (let i = 0; i < size-1; i++){\r\n      array.push(getRandomNumber(10, height));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n  \r\n  shuffle(array) {\r\n    //Fisher-Yates Shuffle - most time efficient shuffle algorithm which is important \r\n    //for when you are generating this many arrays.\r\n    let counter = array.length;\r\n    while (counter > 0) {\r\n        let index = Math.floor(Math.random() * counter);\r\n        counter--;\r\n        let temp = array[counter];\r\n        array[counter] = array[index];\r\n        array[index] = temp;\r\n    }\r\n    return array;\r\n}\r\n\r\n  onSizeSliderChange(event){\r\n    size = event.target.value;\r\n    pixelwidth = Math.floor((width/(size*2)));\r\n    if(pixelwidth < 1) pixelwidth = 1;\r\n    this.resetArray()\r\n  }\r\n  \r\n  onSpeedSliderChange(event){\r\n    animationSpeed = 1000 - event.target.value;\r\n  }\r\n\r\n  render()\r\n  {\r\n    let array = this.state.array;\r\n    return (\r\n      <div className=\"total-container\">\r\n        <div className=\"array-container\">\r\n          <div className=\"not-array-bar\"\r\n              style={{\r\n              backgroundColor: backgroundColour,\r\n              height: `${height}px`,\r\n              width: `${20}px`,\r\n              }}\r\n          ></div>\r\n          {array.map((value, index) => (\r\n            <div className=\"array-bar\"\r\n              key={index}\r\n              style={{\r\n                backgroundColor: barColour,\r\n                height: `${value}px`,\r\n                width: `${pixelwidth}px`,\r\n              }}></div>\r\n          ))}\r\n        </div>\r\n        <div className=\"footer-container\">\r\n          <div>\r\n              <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n              <button onClick={() => this.MergeSort()}>Merge Sort</button>\r\n              <button onClick={() => this.BubbleSort()}>Bubble Sort</button>\r\n              <button onClick={() => this.HeapSort()}>Heap Sort</button>\r\n              <button onClick={() => this.QuickSort()}>Quick Sort</button>\r\n              <button onClick={() => this.InsertionSort()}>Insertion Sort</button>\r\n          </div>\r\n          <div>\r\n            <label>Size &nbsp;</label>\r\n            <input \r\n            class=\"size-slider\"\r\n            type=\"range\" \r\n            min=\"4\"\r\n            max=\"275\"\r\n            value={this.state.value}\r\n            onChange={this.onSizeSliderChange}>\r\n            </input>\r\n          </div>\r\n          <div>\r\n            <label>Speed</label>\r\n            <input \r\n            class=\"size-slider\"\r\n            type=\"range\" \r\n            min=\"1\"\r\n            max=\"1000\"\r\n            value={this.state.value}\r\n            onChange={this.onSpeedSliderChange}>\r\n            </input>\r\n          </div>\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n\r\n}\r\nfunction wait(ms) {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\nfunction getRandomNumber(min, max){\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Sort from \"./components/Sort\";\n\nfunction App()\n{\n  return (\n    <div className=\"App\">\n      <Sort></Sort>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}