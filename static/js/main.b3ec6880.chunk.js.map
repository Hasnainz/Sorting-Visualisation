{"version":3,"sources":["components/Timer.js","components/Algorithms/heapsort.js","components/Algorithms/quicksort.js","components/Algorithms/insertionsort.js","components/Algorithms/mergesort.js","components/Array.js","components/Algorithms/bubblesort.js","components/ArrayContainer.js","components/Sort.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Timer","animations","size","props","useState","elapsed","setElapsed","useEffect","interval","isSorting","setInterval","Date","now","start","clearInterval","doReset","className","Math","floor","getHeapSortAnimations","array","length","i","maxHeap","push","swap","HeapSort","left","right","max","input","indexA","indexB","temp","getQuickSortAnimations","QuickSort","index","len","Partition","middle","pivot","j","getMergeSortAnimations","auxiliaryArray","slice","MergeSort","auxillaryArray","end","Merge","getInsertionSortAnimations","key","insertionSort","Array","defaultSortType","sortType","ChooseSortType","state","OGarray","timerOn","comparisons","handleSortTypeButtons","bind","array1","array2","compareArrays","this","setState","arrayBars","document","getElementsByName","shouldSort","InsertionSort","BubbleSort","swapped","a","b","getBubbleSortAnimations","e","target","value","forEach","bar","style","backgroundColor","wait","barOneIndex","barTwoIndex","barHeight","barOneStyle","barTwoStyle","speed","height","FinishSorting","barOneHeight","keyHeight","tempPivotIndex","barTwoHeight","previousPivot","pivotIndex","parseInt","WindowWidth","ArraySize","maxheight","pixelwidth","window","innerWidth","width","map","name","type","id","checked","onChange","reset","React","Component","ms","Promise","resolve","setTimeout","ArrayContainer","arraycount","ArrayS","arr","Sort","calculateMaxArraySize","barlength","calculateBarLength","innerHeight","getRandomArray","handleSizeSlider","handleSpeedSlider","handleAddArray","handleResetArray","toggleSorting","event","onClick","min","WindowHeight","NumberOfArrays","maxlength","random","Main","updateWindowDimensions","addEventListener","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b3ec6880.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction Timer(props) {\r\n    const [elapsed, setElapsed] = useState(0);\r\n\r\n    useEffect(() => {\r\n        let interval = null;\r\n        if (props.isSorting) {\r\n        interval = setInterval(() => {\r\n            setElapsed(Date.now() - props.start);\r\n        }, 10);\r\n\r\n        } else if (!props.isSorting) {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [props.isSorting, props.doReset, props.start]);\r\n\r\n    return (\r\n        <label className=\"radio-label\">\r\n            Timer : {Math.floor(elapsed)}ms\r\n        </label>\r\n    )\r\n}\r\n\r\n\r\nexport default Timer;","//Setting global animation and size variables so I don't have to pass them as parameters.\r\nlet animations, size;\r\nexport default function getHeapSortAnimations(array){\r\n    animations = []\r\n    size = array.length;\r\n    //Heapsort works by treating the array as a binary tree which is where a lot of odd numbers come from.\r\n    HeapSort(array);\r\n    return animations;\r\n}\r\nfunction HeapSort(array){\r\n    //You first build the max heap to get the largest value to the top of the heap.\r\n    //We start sorting from the highest node which is what i is set to.\r\n    for (let i = Math.floor(size / 2); i >= 0; i --){\r\n        maxHeap(array, i);\r\n    }   \r\n    //We then sort based on the last child element of the array and go backwards from there.\r\n    for (let i = array.length - 1; i > 0; i--){\r\n        animations.push([0, i, array[0], array[i]]);\r\n        swap(array, 0, i);\r\n        size--\r\n        maxHeap(array, 0);\r\n    }\r\n    return;\r\n}\r\n\r\n\r\n\r\n//This compares a parent and 2 children to make sure that they are in order for a max heap. \r\nfunction maxHeap(array, i) {\r\n    //Because we are representing a binary tree with an array, to find the left and right nodes \r\n    //we can multiply by 2 and add 1 and 2 respectively. Instead of doing an extra calculation,\r\n    //The right node will just be the left node + 1.\r\n    const left = 2 * i + 1\r\n    const right = left + 1\r\n    //The parent node\r\n    let max = i\r\n\r\n    //We now compare if the parent node is larger than its children.\r\n    //We also check that the already sorted nodes are left alone which is where the in bounds in checked.\r\n    if (left < size && array[left] > array[max]){\r\n        max = left\r\n    }\r\n\r\n    if (right < size && array[right] > array[max]){\r\n        max = right\r\n    }\r\n\r\n    //If if turns out that the parent node was larger than its children,\r\n    //We now need to swap them and then repeat this but the child now becomes the parent node.\r\n    //We repeat this to ensure the children's children are sorted. \r\n    if (max !== i) {\r\n        animations.push([i, max, array[i], array[max]]);\r\n        swap(array, i, max)\r\n        maxHeap(array, max)\r\n    }\r\n}\r\n\r\n//This just swaps two elements of an array using a temporary variable.\r\n//For some unknown reason, the [,][,] method that exists in javascript to swap these\r\n//(I used in quicksort line 47) didn't work here.\r\nfunction swap(input, indexA, indexB) {\r\n    const temp = input[indexA]\r\n    input[indexA] = input[indexB]\r\n    input[indexB] = temp\r\n}","let animations;\r\n\r\nexport default function getQuickSortAnimations(array){\r\n    animations = [];\r\n    QuickSort(array, 0, array.length-1)\r\n    return animations;\r\n}\r\n    \r\nfunction QuickSort(array, left = 0, right = array.length - 1) {\r\n    let len = array.length,index;\r\n    if(len > 1) {\r\n        //First a partition is made to organise where the pivot value is.\r\n      index = Partition(array, left, right)\r\n      if(left < index - 1) {\r\n        QuickSort(array, left, index - 1);\r\n      } \r\n      if(index < right) {\r\n        QuickSort(array, index, right);\r\n      }\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction Partition(array, left, right) {\r\n    //This sets up a pivot value to sort other values around.\r\n    let middle = Math.floor((right + left) / 2),\r\n        pivot = array[middle],\r\n        i = left,\r\n        j = right\r\n        animations.push([middle, pivot])\r\n    //Checks to make sure that the left value is smaller than the right value.\r\n    while(i <= j) {\r\n        //Compares the left value to the pivot value, increases it if it is smaller than the pivot.\r\n        while(array[i] < pivot) {\r\n            animations.push([i]);\r\n            i++\r\n        }\r\n        //Compares right value is larger than the pivot value, decreases it if it smaller than the pivot.\r\n        while(array[j] > pivot) {\r\n            animations.push([j]);\r\n            j--\r\n        }\r\n        //This will swap elements i and j which have been selected from the above process.\r\n        if(i <= j) {\r\n            animations.push([i, j, array[i], array[j]]); \r\n            //Swaps elements of the array.\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n            i++\r\n            j--\r\n        }\r\n    }\r\n    return i;\r\n}","let animations;\r\nexport default function getInsertionSortAnimations(array){\r\n    animations = [];\r\n    insertionSort(array);\r\n    return animations;\r\n}\r\n    \r\nfunction insertionSort(array){\r\n    let size = array.length;\r\n    for (let i = 1; i < size; i++){\r\n        //This assigns indexes i, j and the values of them. \r\n        let key = array[i];\r\n        let j = i - 1;\r\n        //This for each element, keeps moving left until it has found the place \r\n        //where it needs to be inserted and then it inserts it there.\r\n        while (j >= 0 && array[j] > key){\r\n            animations.push([j, i, array[j]]);\r\n            array[j + 1] = array[j];\r\n            j-- ;\r\n        }\r\n        animations.push([j+1, key])\r\n        array[j + 1] = key;\r\n    }\r\n    return array;\r\n};","export default function getMergeSortAnimations(array){\r\n    //By using array.slice(), I assign the auxiliary array to a copy of the array.\r\n    //I then use this to sort on but I can still have a copy of the original array.\r\n    const auxiliaryArray = array.slice();\r\n    const animations = []\r\n    if (array.length <= 1) return array;\r\n    MergeSort(array, auxiliaryArray, 0, array.length - 1, animations);\r\n    return animations;\r\n}\r\nfunction MergeSort(array, auxillaryArray, start, end, animations){\r\n    if(start === end) return;\r\n    const middle = Math.floor((start + end)/2);\r\n    //I first run merge sort recursively on the first half of the array.\r\n    MergeSort(auxillaryArray, array, start, middle, animations);\r\n    //Then run merge sort recursively on the second half of the array.\r\n    MergeSort(auxillaryArray, array, middle + 1, end, animations);\r\n    //Then use the auxillary array in place of the array\r\n    Merge(array, auxillaryArray, start, end, middle, animations);\r\n}\r\nfunction Merge(array, auxillaryArray, start, end, middle, animations){\r\n    let left = start;\r\n    let right = middle + 1;\r\n    let index = start;\r\n    //This goes from the left and right pillar and merges them together by overriding the array using values from the auxillary array.\r\n    while(left <= middle && right <= end){\r\n        if(auxillaryArray[left] < auxillaryArray[right]){\r\n            animations.push([left, index, auxillaryArray[left]])\r\n            array[index] = auxillaryArray[left];\r\n            left++;\r\n        }else{\r\n            animations.push([right, index, auxillaryArray[right]])\r\n            array[index] = auxillaryArray[right];\r\n            right++;\r\n        }\r\n        index++;\r\n    }\r\n    //When doing the above step there will be left over values where one pillar has reached its end although the other hasn't \r\n    //This is to push the other pillar to the end and overwrite those values.\r\n    while(left <= middle){\r\n        animations.push([left, index,auxillaryArray[left]])\r\n        array[index] = auxillaryArray[left];\r\n        left++;\r\n        index++;\r\n    }\r\n    while(right <= end){\r\n        animations.push([right, index, auxillaryArray[right]])\r\n        array[index] = auxillaryArray[right];\r\n        right++;\r\n        index++;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport './Styles/Styles.css';\r\nimport Timer from './Timer';\r\nimport getBubbleSortAnimations from './Algorithms/bubblesort';\r\nimport getHeapSortAnimations from './Algorithms/heapsort';\r\nimport getQuickSortAnimations from './Algorithms/quicksort';\r\nimport getMergeSortAnimations from './Algorithms/mergesort';\r\nimport getInsertionSortAnimations from './Algorithms/insertionsort';\r\n\r\nconst primaryColour = \"#3DCBE0\"; //blue\r\nconst selectedColour = \"#7662F5\"; //purple\r\nconst successColour = \"#43F04F\"; //green\r\nconst failedColour = \"#FA5E3F\"; //red\r\nconst pivotColour = \"#198494\"; //dark blue\r\n\r\nexport default class Array extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const defaultSortType = ChooseSortType(this.props.index);\r\n        this.state = {\r\n            OGarray: this.props.array,\r\n            array: this.props.array,\r\n            isSorting: false,\r\n            start: Date.now(),\r\n            timerOn: false,\r\n            comparisons: 0,\r\n            sortType: defaultSortType,\r\n        }\r\n\r\n        this.handleSortTypeButtons = this.handleSortTypeButtons.bind(this);\r\n    }\r\n    componentDidUpdate() {\r\n        if(!compareArrays(this.state.OGarray, this.props.array)){\r\n            this.setState({\r\n                OGarray: this.props.array,\r\n                array: this.props.array,\r\n                start: Date.now(),\r\n            })\r\n        }\r\n        const array = this.state.array.slice();\r\n        let arrayBars = document.getElementsByName(`array${this.props.index}`)\r\n        if(this.props.shouldSort && !this.state.isSorting) {\r\n            this.setState({ isSorting: true, timerOn: true, start: Date.now()});\r\n            switch(this.state.sortType){\r\n                case \"merge\":\r\n                    this.MergeSort(getMergeSortAnimations(array), arrayBars);\r\n                    break;\r\n                case \"insertion\":\r\n                    this.InsertionSort(getInsertionSortAnimations(array), arrayBars);\r\n                    break;\r\n                case \"quick\":\r\n                    this.QuickSort(getQuickSortAnimations(array), arrayBars);\r\n                    break;\r\n                case \"bubble\":\r\n                    this.BubbleSort(getBubbleSortAnimations(array), arrayBars);\r\n                    break;\r\n                case \"heap\":\r\n                    this.HeapSort(getHeapSortAnimations(array), arrayBars);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        else if(!this.props.shouldSort && this.state.isSorting) {\r\n            this.setState({ isSorting: false, timerOn: false});\r\n            return;\r\n        }\r\n    }\r\n\r\n\r\n    handleSortTypeButtons(e) {\r\n        this.setState({\r\n            sortType: e.target.value,\r\n        })\r\n    }\r\n\r\n    async FinishSorting(arrayBars) {\r\n        this.setState({ \r\n            timerOn: false \r\n        });\r\n        arrayBars.forEach(bar => {\r\n            bar.style.backgroundColor = successColour;\r\n        });\r\n        await wait(1000);\r\n        arrayBars.forEach(bar => {\r\n            bar.style.backgroundColor = primaryColour;\r\n        });\r\n    }\r\n    async MergeSort(animations, arrayBars) {\r\n        let array = this.state.array.slice();\r\n        let comparisons = this.state.comparisons;\r\n        const length = animations.length;\r\n        for(let i = 0; i < length; i++){\r\n          if(this.props.shouldSort){\r\n            let [barOneIndex, barTwoIndex, barHeight] = animations[i];\r\n            if(barOneIndex === this.props.array.length) barOneIndex--;\r\n            if(barTwoIndex === this.props.array.length) barTwoIndex--;\r\n\r\n            let barOneStyle = arrayBars[barOneIndex].style;\r\n            let barTwoStyle = arrayBars[barTwoIndex].style;\r\n            barOneStyle.backgroundColor = selectedColour;\r\n            barTwoStyle.backgroundColor = selectedColour;\r\n            await wait(this.props.speed);\r\n\r\n            barTwoStyle.height = `${barHeight}px`;\r\n            array[barTwoIndex] = barHeight;\r\n            await wait(this.props.speed);\r\n            barOneStyle.backgroundColor = primaryColour;\r\n            barTwoStyle.backgroundColor = primaryColour;\r\n          }\r\n          else{\r\n            return;\r\n          }\r\n          comparisons++;\r\n          this.setState({array: array, comparisons: comparisons});\r\n        }\r\n        this.FinishSorting(arrayBars);\r\n    }\r\n\r\n    async InsertionSort(animations, arrayBars) {\r\n        let array = this.state.array.slice();\r\n        let comparisons = this.state.comparisons;\r\n        const length = animations.length;\r\n        for(let i = 0; i < length; i++){\r\n          if(this.props.shouldSort){\r\n            if(animations[i].length === 3){\r\n              let [barOneIndex, barTwoIndex, barOneHeight] = animations[i];\r\n              arrayBars[barOneIndex].style.backgroundColor = selectedColour;\r\n              arrayBars[barTwoIndex].style.backgroundColor = selectedColour;\r\n\r\n              arrayBars[barOneIndex+1].style.height = `${barOneHeight}px`;\r\n              array[barOneIndex+1] = barOneHeight;\r\n\r\n              await wait(this.props.speed);\r\n              arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n              arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\r\n            }\r\n            else{\r\n              let [barOneIndex, keyHeight] = animations[i];\r\n              arrayBars[barOneIndex].style.height = `${keyHeight}px`;\r\n              array[barOneIndex] = keyHeight;\r\n              await wait(this.props.speed);\r\n            }\r\n          }\r\n          else{\r\n            return;\r\n          }\r\n          comparisons++;\r\n          this.setState({array: array, comparisons: comparisons});\r\n        }\r\n        this.FinishSorting(arrayBars);\r\n    }\r\n    async QuickSort(animations, arrayBars) {\r\n        let array = this.state.array.slice();\r\n        let comparisons = this.state.comparisons;\r\n        const length = animations.length;\r\n        let tempPivotIndex = 0;\r\n        for(let i = 0; i < length; i++){\r\n          if(this.props.shouldSort){\r\n            if(animations[i].length === 4){\r\n              let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i];  \r\n\r\n              arrayBars[barOneIndex].style.height = `${barTwoHeight}px`;\r\n              array[barOneIndex] = barTwoHeight;\r\n\r\n              arrayBars[barTwoIndex].style.height = `${barOneHeight}px`;\r\n              array[barTwoIndex] = barOneHeight;\r\n\r\n              arrayBars[barOneIndex].style.backgroundColor = successColour;\r\n              arrayBars[barTwoIndex].style.backgroundColor = successColour;\r\n              await wait(this.props.speed);\r\n              arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n              arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\r\n            }\r\n            else if(animations[i].length === 2){\r\n              if(i !== 0){\r\n                let [previousPivot] = animations[i-1];\r\n                arrayBars[previousPivot].style.backgroundColor = primaryColour;\r\n              }\r\n              let [pivotIndex] = animations[i];\r\n              arrayBars[pivotIndex].style.backgroundColor = pivotColour;\r\n              tempPivotIndex = pivotIndex;\r\n              await wait(this.props.speed);\r\n            }\r\n            else{\r\n              let [barOneIndex] = animations[i];\r\n              arrayBars[barOneIndex].style.backgroundColor = selectedColour;\r\n              await wait(this.props.speed);\r\n              arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n            }  \r\n          }\r\n          else{\r\n            arrayBars[tempPivotIndex].style.backgroundColor = primaryColour;\r\n            return;\r\n          }\r\n          comparisons++;\r\n          this.setState({array: array, comparisons: comparisons});\r\n        }\r\n        this.FinishSorting(arrayBars);\r\n    }\r\n    async BubbleSort(animations, arrayBars) {\r\n        let array = this.state.array.slice();\r\n        let comparisons = this.state.comparisons;\r\n        const length = animations.length;\r\n        for(let i = 0; i < length; i++){\r\n            if(this.props.shouldSort){\r\n                let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i]\r\n                let barOneStyle = arrayBars[barOneIndex].style;\r\n                let barTwoStyle = arrayBars[barTwoIndex].style;\r\n                barOneStyle.backgroundColor = selectedColour;\r\n                barTwoStyle.backgroundColor = selectedColour;\r\n                await wait(this.props.speed);\r\n\r\n                if(parseInt(barOneHeight) > parseInt(barTwoHeight)){\r\n                    barOneStyle.height = `${barTwoHeight}px`;\r\n                    array[barOneIndex] = barTwoHeight;\r\n\r\n                    barTwoStyle.height = `${barOneHeight}px`;\r\n                    array[barTwoIndex] = barOneHeight;\r\n                    \r\n                    barOneStyle.backgroundColor = successColour;\r\n                    barTwoStyle.backgroundColor = successColour;\r\n                }else{\r\n                    barOneStyle.backgroundColor = failedColour;\r\n                    barTwoStyle.backgroundColor = failedColour;\r\n                }\r\n                await wait(this.props.speed);\r\n                barOneStyle.backgroundColor = primaryColour;\r\n                barTwoStyle.backgroundColor = primaryColour;\r\n            }\r\n            else{\r\n                return;\r\n            }\r\n            comparisons++;\r\n            this.setState({array: array, comparisons: comparisons});\r\n        }\r\n        this.FinishSorting(arrayBars);\r\n    }\r\n    async HeapSort(animations, arrayBars) {\r\n        let array = this.state.array.slice();\r\n        let comparisons = this.state.comparisons;\r\n        const length = animations.length;\r\n        for(let i = 0; i < length; i++){\r\n          if(this.props.shouldSort){\r\n            let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i];   \r\n            arrayBars[barOneIndex].style.backgroundColor = selectedColour;\r\n            arrayBars[barTwoIndex].style.backgroundColor = selectedColour;\r\n            await wait(this.props.speed);\r\n\r\n            arrayBars[barOneIndex].style.height = `${barTwoHeight}px`;  \r\n            array[barOneIndex] = barTwoHeight;\r\n\r\n            arrayBars[barTwoIndex].style.height = `${barOneHeight}px`;\r\n            array[barTwoIndex] = barOneHeight;\r\n            \r\n            arrayBars[barOneIndex].style.backgroundColor = successColour;\r\n            arrayBars[barTwoIndex].style.backgroundColor = successColour;\r\n            await wait(this.props.speed);\r\n            arrayBars[barOneIndex].style.backgroundColor = primaryColour;\r\n            arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\r\n          }\r\n          else{\r\n            return;\r\n          }\r\n          comparisons++;\r\n          this.setState({array: array, comparisons: comparisons});\r\n        }\r\n        this.FinishSorting(arrayBars);\r\n    }\r\n\r\n    render() {\r\n        const array = this.state.array;\r\n        const maxheight = this.props.maxheight;\r\n        const pixelwidth = calculatePixelWidth(window.innerWidth,array.length);\r\n        return(\r\n            <div className=\"array\">\r\n                <div className=\"transparent-array-bar\"\r\n                     style={{\r\n                         height: `${maxheight}px`,\r\n                         width: `${1}px`,\r\n                         backgroundColor: `transparent`,\r\n                     }}>\r\n\r\n                </div>\r\n\r\n                {array.map((value, index) => (\r\n                    <div className=\"array-bar\"\r\n                         name={`array${this.props.index}`}\r\n                         key={index}\r\n                         style={{\r\n                         height: `${value}px`,\r\n                         width: `${pixelwidth}px`,\r\n                }}></div>))}\r\n\r\n                <div className=\"sort-button-container\">\r\n                    <label className=\"radio-label\">\r\n                        <input type=\"radio\" \r\n                            id=\"merge\" \r\n                            value=\"merge\"\r\n                            checked={this.state.sortType === \"merge\"} \r\n                            name={`${this.props.index}`} \r\n                            onChange={this.handleSortTypeButtons}/>\r\n                        <span className=\"checkmark\"></span>Merge\r\n                    </label>\r\n                    <label className=\"radio-label\">\r\n                        <input type=\"radio\" className=\"radio-button\"\r\n                            id=\"insertion\" \r\n                            value=\"insertion\" \r\n                            checked={this.state.sortType === \"insertion\"} \r\n                            name={`${this.props.index}`} \r\n                            onChange={this.handleSortTypeButtons}/>\r\n                        <span className=\"checkmark\"></span>Insertion\r\n                    </label>\r\n                    \r\n                    <label className=\"radio-label\">\r\n                        <input type=\"radio\" \r\n                            id=\"quick\" \r\n                            value=\"quick\" \r\n                            checked={this.state.sortType === \"quick\"} \r\n                            name={`${this.props.index}`} \r\n                            onChange={this.handleSortTypeButtons}/>\r\n                        <span className=\"checkmark\"></span>Quick\r\n                    </label>\r\n\r\n                    <label className=\"radio-label\">\r\n                        <input type=\"radio\" \r\n                            id=\"bubble\" \r\n                            value=\"bubble\" \r\n                            checked={this.state.sortType === \"bubble\"} \r\n                            name={`${this.props.index}`} \r\n                            onChange={this.handleSortTypeButtons}/>\r\n                        <span className=\"checkmark\"></span>Bubble\r\n                    </label>\r\n\r\n                    <label className=\"radio-label\">\r\n                        <input type=\"radio\" \r\n                            id=\"heap\" \r\n                            value=\"heap\" \r\n                            checked={this.state.sortType === \"heap\"} \r\n                            name={`${this.props.index}`} \r\n                            onChange={this.handleSortTypeButtons}/>\r\n                        <span className=\"checkmark\"></span>Heap\r\n                    </label>\r\n                    <Timer isSorting={this.state.timerOn} \r\n                           doReset={this.state.reset}\r\n                           start={this.state.start}/>\r\n                    <label className=\"radio-label\">\r\n                        Comparisons : {this.state.comparisons}\r\n                    </label>\r\n                </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\nfunction ChooseSortType(index) {\r\n    let sortType;\r\n    switch (index) {\r\n        case 0:\r\n            sortType = \"merge\";\r\n            break;\r\n        case 1:\r\n            sortType = \"insertion\";\r\n            break;\r\n        case 2:\r\n            sortType = \"quick\";\r\n            break;\r\n        case 3:\r\n            sortType = \"bubble\";\r\n            break;\r\n        case 4:\r\n            sortType = \"heap\";\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n    return sortType;\r\n}\r\nfunction compareArrays(array1, array2){\r\n    if(array1.length !== array2.length){\r\n        return false;\r\n    }\r\n    for(let i = 0; i < array1.length; i++){\r\n        if(array1[i] !== array2[i]){\r\n            return false\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction calculatePixelWidth(WindowWidth, ArraySize) {\r\n    return (WindowWidth*0.36/ArraySize);\r\n}\r\nfunction wait(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n  }","export default function getBubbleSortAnimations(array){\r\n    //Initialise the animations array so that it can be returned.\r\n    let animations = [];\r\n    const arrayLength = array.length;\r\n    //Assign swapped to a variable so i\r\n    let swapped;\r\n    //This starts from the end of the array.\r\n    for (let i = arrayLength; i > 0; i--) {\r\n        swapped = 0;\r\n        //This increments the end of the array so that it doesn't check already sorted values.\r\n        for ( let j = 1; j < i; j++ ) {\r\n        //Assigning the values of elements that are being compared.\r\n        const a = array[j-1];\r\n        const b = array[j];\r\n        //sending this information to the animation array so that the program can do the same calculation below.\r\n        animations.push([j-1, j, a, b]);\r\n            if (a > b) {\r\n              //swapping the values if the left pillar is smaller than the right pillar \r\n              array[j-1] = b;\r\n              array[j] = a;\r\n              swapped = j;\r\n            }\r\n        }\r\n        //If 0 then it will appear as false and break out of the loop because the swapped is the index of the swap \r\n        if (!swapped) {\r\n            break;\r\n        }else {\r\n            i = swapped + 1;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n    \r\n","import React from \"react\";\r\nimport './Styles/Styles.css';\r\nimport Array from './Array';\r\n\r\nexport default class ArrayContainer extends React.Component {\r\n   \r\n    render() {\r\n        const arraycount = this.props.arraycount;\r\n        let ArrayS = [];\r\n        for(let i = 0; i < arraycount; i++){\r\n            ArrayS.push(\r\n            <Array array={this.props.array}\r\n                   maxheight={this.props.maxheight} \r\n                   index={i}\r\n                   shouldSort={this.props.isSorting}\r\n                   speed={this.props.speed}/>\r\n            );\r\n        }\r\n        return(\r\n            ArrayS.map((arr, index) => (\r\n            <div className=\"array-container\"\r\n                 key={index}>\r\n                {arr}\r\n            </div>\r\n            )))\r\n    }\r\n}\r\n\r\n  ","import React from \"react\";\r\nimport ArrayContainer from './ArrayContainer';\r\nimport './Styles/Styles.css';\r\n\r\nexport default class Sort extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        const size = calculateMaxArraySize(window.innerWidth);\r\n        const barlength = calculateBarLength(window.innerHeight, 3)\r\n        this.state = {\r\n            isSorting: false,\r\n            size: size,\r\n            barlength: barlength,\r\n            array: getRandomArray(size, barlength),\r\n            speed: 0,\r\n            arraycount: 3,\r\n        }\r\n        this.handleSizeSlider = this.handleSizeSlider.bind(this);\r\n        this.handleSpeedSlider = this.handleSpeedSlider.bind(this);\r\n        this.handleAddArray = this.handleAddArray.bind(this);\r\n        this.handleResetArray = this.handleResetArray.bind(this);\r\n        this.toggleSorting = this.toggleSorting.bind(this);\r\n\r\n    }\r\n    handleSpeedSlider(e) {\r\n        this.setState({\r\n            speed: 1000 - e.target.value,\r\n        })\r\n    }\r\n\r\n    toggleSorting() {\r\n        this.setState((state) => ({\r\n            isSorting: !state.isSorting,\r\n        }));\r\n    }\r\n    handleSizeSlider(event) {\r\n        const size = event.target.value;\r\n        this.setState((state) => ({\r\n            isSorting: false,\r\n            size: size,\r\n            array: getRandomArray(size, state.barlength)\r\n        }))\r\n    }\r\n\r\n    handleResetArray() {\r\n        const arr = getRandomArray(this.state.size, this.state.barlength)\r\n        this.setState({\r\n            isSorting: false,\r\n            array: arr,\r\n        })\r\n    }\r\n\r\n   \r\n    handleAddArray(e) {\r\n        let arraycount = this.state.arraycount;\r\n        if(arraycount < 5 && e.target.value === \"+\") {\r\n            arraycount++;\r\n        }\r\n        else if(arraycount > 1 && e.target.value === \"-\") {\r\n            arraycount--;\r\n        }\r\n        else{\r\n            return;\r\n        }\r\n        const barlength = calculateBarLength(window.innerHeight, arraycount)\r\n        this.setState({\r\n            isSorting: false,\r\n            arraycount: arraycount,\r\n            barlength: barlength,\r\n            array: getRandomArray(this.state.size, barlength)\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <div>\r\n                <div>\r\n                    <ArrayContainer\r\n                        arraycount={this.state.arraycount} \r\n                        array={this.state.array}\r\n                        maxheight={this.state.barlength}\r\n                        isSorting={this.state.isSorting}\r\n                        speed={this.state.speed}/>\r\n                </div>\r\n\r\n                <div className=\"button-container\">\r\n                    <button className=\"medium-button\" \r\n                            value=\"-\" \r\n                            onClick={(e) => this.handleAddArray(e)}>-</button>\r\n\r\n                    <button className=\"medium-button\" \r\n                        onClick={this.handleResetArray}>⟳</button>\r\n\r\n                    <button className=\"medium-button\" \r\n                        value=\"+\"\r\n                         onClick={(e) => this.handleAddArray(e)}>+</button>\r\n\r\n                    <button onClick={this.toggleSorting} \r\n                            className=\"main-button\"\r\n                            style={{\r\n                                backgroundColor: !this.state.isSorting ? '#3DCBE0' : '#FA5E3F'\r\n                            }}>\r\n                        {!this.state.isSorting ? 'Sort' : 'Stop'}\r\n                    </button>\r\n               </div>\r\n               \r\n               <div className=\"slider-container\">\r\n                    <label className=\"slider-label\">\r\n                        <input className=\"slider\"\r\n                            type=\"range\" \r\n                            id=\"speed\"\r\n                            min=\"0\"\r\n                            max=\"1000\"\r\n                            value={1000 - this.state.speed}\r\n                            onChange={(e) => this.handleSpeedSlider(e)}/>\r\n                        Speed\r\n                    </label>\r\n                    <label className=\"slider-label\">\r\n                        <input className=\"slider\"\r\n                            type=\"range\" \r\n                            id=\"size\" \r\n                            min=\"4\"\r\n                            max={calculateMaxArraySize(window.innerWidth)}\r\n                            value={this.state.size}\r\n                            onChange={this.handleSizeSlider}/>\r\n                        &nbsp;Size\r\n                    </label>\r\n                </div>\r\n\r\n                    \r\n            </div>\r\n        )\r\n    }\r\n}\r\nfunction calculateBarLength(WindowHeight, NumberOfArrays) {\r\n    return Math.floor((WindowHeight*0.64)/NumberOfArrays);\r\n}\r\n\r\nfunction calculateMaxArraySize(WindowWidth) {\r\n    return Math.floor(WindowWidth * 0.147);\r\n}\r\n\r\nfunction getRandomArray(size, maxlength) { \r\n    //This generates a random array.\r\n    let array = [];\r\n    for (let i = 0; i < size-1; i++){\r\n        array.push(getRandomNumber(10, maxlength));\r\n    }\r\n    return array;\r\n}\r\n\r\nfunction getRandomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}","import React from 'react';\r\nimport Sort from './Sort'\r\nimport './Styles/Styles.css';\r\n\r\nexport default class Main extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            width: window.innerWidth,\r\n            height: window.innerHeight,\r\n        }\r\n\r\n    }\r\n    componentDidMount() {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener(\"resize\", this.updateWindowDimensions.bind(this));\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"resize\", this.updateWindowDimensions.bind(this));\r\n    }\r\n\r\n    updateWindowDimensions() {\r\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"page-container\">\r\n                <Sort/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\n//This imports my predefined components from their respective files.\r\nimport Main from \"./components/Main\";\r\n\r\nfunction App()\r\n{\r\n  return (\r\n    <Main/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n//This renders whatever is in the App.js file\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}