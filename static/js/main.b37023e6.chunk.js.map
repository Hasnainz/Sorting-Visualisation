{"version":3,"sources":["components/ArraySorting/Timer.js","components/Algorithms/heapsort.js","components/Algorithms/quicksort.js","components/Algorithms/insertionsort.js","components/Algorithms/mergesort.js","components/ArraySorting/Array.js","components/Algorithms/bubblesort.js","components/ArraySorting/ArrayContainer.js","components/ArraySorting/Sort.js","components/ArraySorting/SortingMain.js","App.js","serviceWorker.js","index.js"],"names":["Timer","animations","size","props","useState","elapsed","setElapsed","useEffect","interval","isSorting","setInterval","Date","now","start","clearInterval","doReset","className","Math","floor","getHeapSortAnimations","array","length","i","maxHeap","push","swap","HeapSort","left","right","max","input","indexA","indexB","temp","getQuickSortAnimations","QuickSort","index","len","Partition","middle","pivot","j","getMergeSortAnimations","auxiliaryArray","slice","MergeSort","auxillaryArray","end","Merge","getInsertionSortAnimations","key","insertionSort","Array","defaultSortType","sortType","ChooseSortType","state","OGarray","timerOn","comparisons","handleSortTypeButtons","bind","array1","array2","compareArrays","this","setState","arrayBars","document","getElementsByName","shouldSort","InsertionSort","BubbleSort","swapped","a","b","getBubbleSortAnimations","e","target","value","forEach","bar","style","backgroundColor","wait","barOneIndex","barTwoIndex","barHeight","barOneStyle","barTwoStyle","speed","height","FinishSorting","barOneHeight","keyHeight","tempPivotIndex","barTwoHeight","previousPivot","pivotIndex","parseInt","WindowWidth","ArraySize","maxheight","pixelwidth","window","innerWidth","width","map","name","type","id","checked","onChange","reset","React","Component","ms","Promise","resolve","setTimeout","ArrayContainer","arraycount","ArrayS","arr","Sort","calculateMaxArraySize","barlength","calculateBarLength","innerHeight","getRandomArray","handleSizeSlider","handleSpeedSlider","handleAddArray","handleResetArray","toggleSorting","event","onClick","min","WindowHeight","NumberOfArrays","maxlength","random","Main","updateWindowDimensions","addEventListener","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b37023e6.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n//Writing a function to be exported\nfunction Timer(props) { //Props are the properties it gets from its parents.\n    //useState is an encapsulated value so that it won't share this data\n    //with other instances of a timer.\n    const [elapsed, setElapsed] = useState(0); //Elapsed time and a function to set the elapsed time\n\n    //\n    useEffect(() => {\n        let interval = null;\n        if (props.isSorting) {\n        //Lamda expression to set off every 10ms to update the time on the screen\n        //based on the data passed from the parent component.\n        interval = setInterval(() => {\n            setElapsed(Date.now() - props.start);\n        }, 10);\n        //If the parent has stopped sorting, clear the interval and be ready to reset the timer to 0.\n        } else if (!props.isSorting) {\n            clearInterval(interval);\n        }\n        //Waits until the program is reset before the interval get reset so that the time \n        //remains on the screen so you can compare it.\n        return () => clearInterval(interval);\n    }, [props.isSorting, props.doReset, props.start]);\n\n    return (\n        <label className=\"radio-label\">\n            Timer : {Math.floor(elapsed)}ms\n        </label>\n    )\n}\n\n\nexport default Timer;","//Setting global animation and size variables so I don't have to pass them as parameters.\nlet animations, size;\nexport default function getHeapSortAnimations(array){\n    animations = []\n    size = array.length;\n    //Heapsort works by treating the array as a binary tree which is where a lot of odd numbers come from.\n    HeapSort(array);\n    return animations;\n}\nfunction HeapSort(array){\n    //You first build the max heap to get the largest value to the top of the heap.\n    //We start sorting from the highest node which is what i is set to.\n    for (let i = Math.floor(size / 2); i >= 0; i --){\n        maxHeap(array, i);\n    }   \n    //We then sort based on the last child element of the array and go backwards from there.\n    for (let i = array.length - 1; i > 0; i--){\n        animations.push([0, i, array[0], array[i]]);\n        swap(array, 0, i);\n        size--\n        maxHeap(array, 0);\n    }\n    return;\n}\n\n\n\n//This compares a parent and 2 children to make sure that they are in order for a max heap. \nfunction maxHeap(array, i) {\n    //Because we are representing a binary tree with an array, to find the left and right nodes \n    //we can multiply by 2 and add 1 and 2 respectively. Instead of doing an extra calculation,\n    //The right node will just be the left node + 1.\n    const left = 2 * i + 1\n    const right = left + 1\n    //The parent node\n    let max = i\n\n    //We now compare if the parent node is larger than its children.\n    //We also check that the already sorted nodes are left alone which is where the in bounds in checked.\n    if (left < size && array[left] > array[max]){\n        max = left\n    }\n\n    if (right < size && array[right] > array[max]){\n        max = right\n    }\n\n    //If if turns out that the parent node was larger than its children,\n    //We now need to swap them and then repeat this but the child now becomes the parent node.\n    //We repeat this to ensure the children's children are sorted. \n    if (max !== i) {\n        animations.push([i, max, array[i], array[max]]);\n        swap(array, i, max)\n        maxHeap(array, max)\n    }\n}\n\n//This just swaps two elements of an array using a temporary variable.\n//For some unknown reason, the [,][,] method that exists in javascript to swap these\n//(I used in quicksort line 47) didn't work here.\nfunction swap(input, indexA, indexB) {\n    const temp = input[indexA]\n    input[indexA] = input[indexB]\n    input[indexB] = temp\n}","let animations;\n\nexport default function getQuickSortAnimations(array){\n    animations = [];\n    QuickSort(array, 0, array.length-1)\n    return animations;\n}\n    \nfunction QuickSort(array, left = 0, right = array.length - 1) {\n    let len = array.length,index;\n    if(len > 1) {\n        //First a partition is made to organise where the pivot value is.\n      index = Partition(array, left, right)\n      if(left < index - 1) {\n        QuickSort(array, left, index - 1);\n      } \n      if(index < right) {\n        QuickSort(array, index, right);\n      }\n    }\n    return array;\n}\n\nfunction Partition(array, left, right) {\n    //This sets up a pivot value to sort other values around.\n    let middle = Math.floor((right + left) / 2),\n        pivot = array[middle],\n        i = left,\n        j = right\n        animations.push([middle, pivot])\n    //Checks to make sure that the left value is smaller than the right value.\n    while(i <= j) {\n        //Compares the left value to the pivot value, increases it if it is smaller than the pivot.\n        while(array[i] < pivot) {\n            animations.push([i]);\n            i++\n        }\n        //Compares right value is larger than the pivot value, decreases it if it smaller than the pivot.\n        while(array[j] > pivot) {\n            animations.push([j]);\n            j--\n        }\n        //This will swap elements i and j which have been selected from the above process.\n        if(i <= j) {\n            animations.push([i, j, array[i], array[j]]); \n            //Swaps elements of the array.\n            [array[i], array[j]] = [array[j], array[i]];\n            i++\n            j--\n        }\n    }\n    return i;\n}","let animations;\nexport default function getInsertionSortAnimations(array){\n    animations = [];\n    insertionSort(array);\n    return animations;\n}\n    \nfunction insertionSort(array){\n    let size = array.length;\n    for (let i = 1; i < size; i++){\n        //This assigns indexes i, j and the values of them. \n        let key = array[i];\n        let j = i - 1;\n        //This for each element, keeps moving left until it has found the place \n        //where it needs to be inserted and then it inserts it there.\n        while (j >= 0 && array[j] > key){\n            animations.push([j, i, array[j]]);\n            array[j + 1] = array[j];\n            j-- ;\n        }\n        animations.push([j+1, key])\n        array[j + 1] = key;\n    }\n};","export default function getMergeSortAnimations(array){\n    //By using array.slice(), I assign the auxiliary array to a copy of the array.\n    //I then use this to sort on but I can still have a copy of the original array.\n    const auxiliaryArray = array.slice();\n    const animations = []\n    if (array.length <= 1) return array;\n    MergeSort(array, auxiliaryArray, 0, array.length - 1, animations);\n    return animations;\n}\nfunction MergeSort(array, auxillaryArray, start, end, animations){\n    if(start === end) return;\n    const middle = Math.floor((start + end)/2);\n    //I first run merge sort recursively on the first half of the array.\n    MergeSort(auxillaryArray, array, start, middle, animations);\n    //Then run merge sort recursively on the second half of the array.\n    MergeSort(auxillaryArray, array, middle + 1, end, animations);\n    //Then use the auxillary array in place of the array\n    Merge(array, auxillaryArray, start, end, middle, animations);\n}\nfunction Merge(array, auxillaryArray, start, end, middle, animations){\n    let left = start;\n    let right = middle + 1;\n    let index = start;\n    //This goes from the left and right pillar and merges them together by overriding the array using values from the auxillary array.\n    while(left <= middle && right <= end){\n        if(auxillaryArray[left] < auxillaryArray[right]){\n            animations.push([left, index, auxillaryArray[left]])\n            array[index] = auxillaryArray[left];\n            left++;\n        }else{\n            animations.push([right, index, auxillaryArray[right]])\n            array[index] = auxillaryArray[right];\n            right++;\n        }\n        index++;\n    }\n    //When doing the above step there will be left over values where one pillar has reached its end although the other hasn't \n    //This is to push the other pillar to the end and overwrite those values.\n    while(left <= middle){\n        animations.push([left, index,auxillaryArray[left]])\n        array[index] = auxillaryArray[left];\n        left++;\n        index++;\n    }\n    while(right <= end){\n        animations.push([right, index, auxillaryArray[right]])\n        array[index] = auxillaryArray[right];\n        right++;\n        index++;\n    }\n}\n","import React from \"react\";\nimport './styles.css';\nimport Timer from './Timer';\nimport getBubbleSortAnimations from '../Algorithms/bubblesort';\nimport getHeapSortAnimations from '../Algorithms/heapsort';\nimport getQuickSortAnimations from '../Algorithms/quicksort';\nimport getMergeSortAnimations from '../Algorithms/mergesort';\nimport getInsertionSortAnimations from '../Algorithms/insertionsort';\n\nconst primaryColour = \"#3DCBE0\"; //blue\nconst selectedColour = \"#7662F5\"; //purple\nconst successColour = \"#43F04F\"; //green\nconst failedColour = \"#FA5E3F\"; //red\nconst pivotColour = \"#198494\"; //dark blue\n\nexport default class Array extends React.Component {\n    constructor(props) {\n        super(props);\n        //Gets which sort type will be selected by default based on the size of the array.\n        const defaultSortType = ChooseSortType(this.props.index);\n        //Private Attributes\n        this.state = {\n            OGarray: this.props.array,\n            array: this.props.array,\n            isSorting: false,\n            start: Date.now(),\n            timerOn: false,\n            comparisons: 0,\n            sortType: defaultSortType,\n        }\n        //Binds the context of clicking a button to a function.\n        this.handleSortTypeButtons = this.handleSortTypeButtons.bind(this);\n    }\n    componentDidUpdate() {\n        //Checks if the parent array and the current array are different and will update the state.\n        if(!compareArrays(this.state.OGarray, this.props.array)){\n            this.setState({\n                OGarray: this.props.array,\n                array: this.props.array,\n                start: Date.now(),\n            })\n        }\n        //Gets and stores a copy of the current array so that the original array is not passed\n        //in by reference. This is expensive but it is needed for control over the visuals of the array.\n        const array = this.state.array.slice();\n        let arrayBars = document.getElementsByName(`array${this.props.index}`)\n        //If it should be sorting (parent component will tell it)\n        //and if it is not already sorting.\n        if(this.props.shouldSort && !this.state.isSorting) {\n            //Then we set sorting to be true, initalise the timer with the current time and set the comparisons to 0;\n            //This is so that time and comparisons are reset whenever sorting is restarted but stays on the screen\n            //indefinately until that point in time.\n            this.setState({ isSorting: true, timerOn: true, start: Date.now(), comparisons: 0});\n            switch(this.state.sortType){\n                case \"merge\":\n                    this.MergeSort(getMergeSortAnimations(array), arrayBars);\n                    break;\n                case \"insertion\":\n                    this.InsertionSort(getInsertionSortAnimations(array), arrayBars);\n                    break;\n                case \"quick\":\n                    this.QuickSort(getQuickSortAnimations(array), arrayBars);\n                    break;\n                case \"bubble\":\n                    this.BubbleSort(getBubbleSortAnimations(array), arrayBars);\n                    break;\n                case \"heap\":\n                    this.HeapSort(getHeapSortAnimations(array), arrayBars);\n                    break;\n                default:\n                    break;\n            }\n        }\n        else if(!this.props.shouldSort && this.state.isSorting) {\n            this.setState({ isSorting: false, timerOn: false});\n            return;\n        }\n    }\n\n    //Change the sorting type\n    handleSortTypeButtons(e) {\n        this.setState({\n            sortType: e.target.value,\n        })\n    }\n    //animation once the sorting has finished.\n    async FinishSorting(arrayBars) {\n        this.setState({ \n            timerOn: false \n        });\n        //llambda function to change each bar colour.\n        arrayBars.forEach(bar => {\n            bar.style.backgroundColor = successColour;\n        });\n        await wait(1000);\n        arrayBars.forEach(bar => {\n            bar.style.backgroundColor = primaryColour;\n        });\n    }\n\n    async MergeSort(animations, arrayBars) {\n        let array = this.state.array.slice();\n        const length = animations.length;\n        for(let i = 0; i < length; i++){\n          if(this.props.shouldSort){\n            let [barOneIndex, barTwoIndex, barHeight] = animations[i];\n            //Making sure that the bars are not going off the screen\n            //(once one side has been sorted, it will point to nothing - this stops it)\n            if(barOneIndex === this.props.array.length) barOneIndex--;\n            if(barTwoIndex === this.props.array.length) barTwoIndex--;\n\n\n            //Changing the colour of the bar.\n            let barOneStyle = arrayBars[barOneIndex].style;\n            let barTwoStyle = arrayBars[barTwoIndex].style;\n            barOneStyle.backgroundColor = selectedColour;\n            barTwoStyle.backgroundColor = selectedColour;\n            await wait(this.props.speed);\n            \n            //Changing the height of the bar.\n            barTwoStyle.height = `${barHeight}px`;\n            array[barTwoIndex] = barHeight;\n            await wait(this.props.speed);\n            //Changing back the colour of the bar.\n            barOneStyle.backgroundColor = primaryColour;\n            barTwoStyle.backgroundColor = primaryColour;\n          }\n          else{\n            return;\n          }\n          //Llambda function that takes the parameter of state so that it can be used\n          //to update the state. Without this, the state may use an old version of state since\n          //it doesn't update immediately.            \n          this.setState((state) => ({array: array, comparisons: state.comparisons + 1}));\n        }\n        this.FinishSorting(arrayBars);\n    }\n\n    async InsertionSort(animations, arrayBars) {\n        let array = this.state.array.slice();\n        const length = animations.length;\n        for(let i = 0; i < length; i++){\n          if(this.props.shouldSort){\n            if(animations[i].length === 3){\n              //Setting the background colour.\n              let [barOneIndex, barTwoIndex, barOneHeight] = animations[i];\n              arrayBars[barOneIndex].style.backgroundColor = selectedColour;\n              arrayBars[barTwoIndex].style.backgroundColor = selectedColour;\n\n              arrayBars[barOneIndex+1].style.height = `${barOneHeight}px`;\n              array[barOneIndex+1] = barOneHeight;\n\n              await wait(this.props.speed);\n              arrayBars[barOneIndex].style.backgroundColor = primaryColour;\n              arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\n            }\n            else{\n              let [barOneIndex, keyHeight] = animations[i];\n              arrayBars[barOneIndex].style.height = `${keyHeight}px`;\n              array[barOneIndex] = keyHeight;\n              await wait(this.props.speed);\n            }\n          }\n          else{\n            return;\n          }\n          this.setState((state) => ({array: array, comparisons: state.comparisons + 1}));\n        }\n        this.FinishSorting(arrayBars);\n    }\n    async QuickSort(animations, arrayBars) {\n        let array = this.state.array.slice();\n        const length = animations.length;\n        let tempPivotIndex = 0;\n        for(let i = 0; i < length; i++){\n          if(this.props.shouldSort){\n            if(animations[i].length === 4){\n              let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i];  \n\n              arrayBars[barOneIndex].style.height = `${barTwoHeight}px`;\n              array[barOneIndex] = barTwoHeight;\n\n              arrayBars[barTwoIndex].style.height = `${barOneHeight}px`;\n              array[barTwoIndex] = barOneHeight;\n\n              arrayBars[barOneIndex].style.backgroundColor = successColour;\n              arrayBars[barTwoIndex].style.backgroundColor = successColour;\n              await wait(this.props.speed);\n              arrayBars[barOneIndex].style.backgroundColor = primaryColour;\n              arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\n            }\n            else if(animations[i].length === 2){\n              if(i !== 0){\n                let [previousPivot] = animations[i-1];\n                arrayBars[previousPivot].style.backgroundColor = primaryColour;\n              }\n              let [pivotIndex] = animations[i];\n              arrayBars[pivotIndex].style.backgroundColor = pivotColour;\n              tempPivotIndex = pivotIndex;\n              await wait(this.props.speed);\n            }\n            else{\n              let [barOneIndex] = animations[i];\n              arrayBars[barOneIndex].style.backgroundColor = selectedColour;\n              await wait(this.props.speed);\n              arrayBars[barOneIndex].style.backgroundColor = primaryColour;\n            }  \n          }\n          else{\n            arrayBars[tempPivotIndex].style.backgroundColor = primaryColour;\n            return;\n          }\n          this.setState((state) => ({array: array, comparisons: state.comparisons + 1}));\n        }\n        this.FinishSorting(arrayBars);\n    }\n    async BubbleSort(animations, arrayBars) {\n        let array = this.state.array.slice();\n        const length = animations.length;\n        for(let i = 0; i < length; i++){\n            if(this.props.shouldSort){\n                let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i]\n                let barOneStyle = arrayBars[barOneIndex].style;\n                let barTwoStyle = arrayBars[barTwoIndex].style;\n                barOneStyle.backgroundColor = selectedColour;\n                barTwoStyle.backgroundColor = selectedColour;\n                await wait(this.props.speed);\n\n                if(parseInt(barOneHeight) > parseInt(barTwoHeight)){\n                    barOneStyle.height = `${barTwoHeight}px`;\n                    array[barOneIndex] = barTwoHeight;\n\n                    barTwoStyle.height = `${barOneHeight}px`;\n                    array[barTwoIndex] = barOneHeight;\n                    \n                    barOneStyle.backgroundColor = successColour;\n                    barTwoStyle.backgroundColor = successColour;\n                }else{\n                    barOneStyle.backgroundColor = failedColour;\n                    barTwoStyle.backgroundColor = failedColour;\n                }\n                await wait(this.props.speed);\n                barOneStyle.backgroundColor = primaryColour;\n                barTwoStyle.backgroundColor = primaryColour;\n            }\n            else{\n                return;\n            }\n            this.setState((state) => ({array: array, comparisons: state.comparisons + 1}));\n        }\n        this.FinishSorting(arrayBars);\n    }\n    async HeapSort(animations, arrayBars) {\n        let array = this.state.array.slice();\n        const length = animations.length;\n        for(let i = 0; i < length; i++){\n          if(this.props.shouldSort){\n            let [barOneIndex, barTwoIndex, barOneHeight, barTwoHeight] = animations[i];   \n            arrayBars[barOneIndex].style.backgroundColor = selectedColour;\n            arrayBars[barTwoIndex].style.backgroundColor = selectedColour;\n            await wait(this.props.speed);\n\n            arrayBars[barOneIndex].style.height = `${barTwoHeight}px`;  \n            array[barOneIndex] = barTwoHeight;\n\n            arrayBars[barTwoIndex].style.height = `${barOneHeight}px`;\n            array[barTwoIndex] = barOneHeight;\n            \n            arrayBars[barOneIndex].style.backgroundColor = successColour;\n            arrayBars[barTwoIndex].style.backgroundColor = successColour;\n            await wait(this.props.speed);\n            arrayBars[barOneIndex].style.backgroundColor = primaryColour;\n            arrayBars[barTwoIndex].style.backgroundColor = primaryColour;\n          }\n          else{\n            return;\n          }\n          this.setState((state) => ({array: array, comparisons: state.comparisons + 1}));\n        }\n        this.FinishSorting(arrayBars);\n    }\n\n    render() {\n        const array = this.state.array;\n        const maxheight = this.props.maxheight;\n        const pixelwidth = calculatePixelWidth(window.innerWidth,array.length);\n        return(\n            <div className=\"array\">\n                <div className=\"transparent-array-bar\"\n                     style={{\n                         height: `${maxheight}px`,\n                         width: `${1}px`,\n                         backgroundColor: `transparent`,\n                     }}>\n\n                </div>\n\n                {array.map((value, index) => (\n                    <div className=\"array-bar\"\n                         name={`array${this.props.index}`}\n                         key={index}\n                         style={{\n                         height: `${value}px`,\n                         width: `${pixelwidth}px`,\n                }}></div>))}\n\n                <div className=\"sort-button-container\">\n                    <label className=\"radio-label\">\n                        <input type=\"radio\" \n                            id=\"merge\" \n                            value=\"merge\"\n                            checked={this.state.sortType === \"merge\"} \n                            name={`${this.props.index}`} \n                            onChange={this.handleSortTypeButtons}/>\n                        <span className=\"checkmark\"></span>Merge\n                    </label>\n                    <label className=\"radio-label\">\n                        <input type=\"radio\" className=\"radio-button\"\n                            id=\"insertion\" \n                            value=\"insertion\" \n                            checked={this.state.sortType === \"insertion\"} \n                            name={`${this.props.index}`} \n                            onChange={this.handleSortTypeButtons}/>\n                        <span className=\"checkmark\"></span>Insertion\n                    </label>\n                    \n                    <label className=\"radio-label\">\n                        <input type=\"radio\" \n                            id=\"quick\" \n                            value=\"quick\" \n                            checked={this.state.sortType === \"quick\"} \n                            name={`${this.props.index}`} \n                            onChange={this.handleSortTypeButtons}/>\n                        <span className=\"checkmark\"></span>Quick\n                    </label>\n\n                    <label className=\"radio-label\">\n                        <input type=\"radio\" \n                            id=\"bubble\" \n                            value=\"bubble\" \n                            checked={this.state.sortType === \"bubble\"} \n                            name={`${this.props.index}`} \n                            onChange={this.handleSortTypeButtons}/>\n                        <span className=\"checkmark\"></span>Bubble\n                    </label>\n\n                    <label className=\"radio-label\">\n                        <input type=\"radio\" \n                            id=\"heap\" \n                            value=\"heap\" \n                            checked={this.state.sortType === \"heap\"} \n                            name={`${this.props.index}`} \n                            onChange={this.handleSortTypeButtons}/>\n                        <span className=\"checkmark\"></span>Heap\n                    </label>\n                    <Timer isSorting={this.state.timerOn} \n                           doReset={this.state.reset}\n                           start={this.state.start}/>\n                    <label className=\"radio-label\">\n                        Comparisons : {this.state.comparisons}\n                    </label>\n                </div>\n            </div>\n            \n        );\n    }\n}\nfunction ChooseSortType(index) {\n    let sortType;\n    switch (index) {\n        case 0:\n            sortType = \"merge\";\n            break;\n        case 1:\n            sortType = \"insertion\";\n            break;\n        case 2:\n            sortType = \"quick\";\n            break;\n        case 3:\n            sortType = \"bubble\";\n            break;\n        case 4:\n            sortType = \"heap\";\n            break;\n        default:\n            break;\n    }\n    return sortType;\n}\nfunction compareArrays(array1, array2){\n    if(array1.length !== array2.length){\n        return false;\n    }\n    for(let i = 0; i < array1.length; i++){\n        if(array1[i] !== array2[i]){\n            return false\n        }\n    }\n    return true;\n}\nfunction calculatePixelWidth(WindowWidth, ArraySize) {\n    return (WindowWidth*0.36/ArraySize);\n}\nfunction wait(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }","export default function getBubbleSortAnimations(array){\n    //Initialise the animations array so that it can be returned.\n    let animations = [];\n    const arrayLength = array.length;\n    //Assign swapped to a variable so i\n    let swapped;\n    //This starts from the end of the array.\n    for (let i = arrayLength; i > 0; i--) {\n        swapped = 0;\n        //This increments the end of the array so that it doesn't check already sorted values.\n        for ( let j = 1; j < i; j++ ) {\n        //Assigning the values of elements that are being compared.\n        const a = array[j-1];\n        const b = array[j];\n        //sending this information to the animation array so that the program can do the same calculation below.\n        animations.push([j-1, j, a, b]);\n            if (a > b) {\n              //swapping the values if the left pillar is smaller than the right pillar \n              array[j-1] = b;\n              array[j] = a;\n              swapped = j;\n            }\n        }\n        //If 0 then it will appear as false and break out of the loop because the swapped is the index of the swap \n        if (!swapped) {\n            break;\n        }else {\n            i = swapped + 1;\n        }\n    }\n    return animations;\n}\n    \n","import React from \"react\";\nimport './styles.css';\nimport Array from './Array';\n\nexport default class ArrayContainer extends React.Component {\n   //Holds an array of objects of type Array (poor naming choice since Array is self-defined)\n    render() {\n        const arraycount = this.props.arraycount;\n        let ArrayS = [];\n        for(let i = 0; i < arraycount; i++){\n            ArrayS.push(\n            <Array array={this.props.array}\n                   maxheight={this.props.maxheight} \n                   index={i}\n                   shouldSort={this.props.isSorting}\n                   speed={this.props.speed}/>\n            );\n        }\n        return(\n            //Maps arrays to the screen using a llambda function.\n            ArrayS.map((arr, index) => (\n            <div className=\"array-container\"\n                 key={index}>\n                {arr}\n            </div>\n            )))\n    }\n}\n\n  ","import React from \"react\";\nimport ArrayContainer from './ArrayContainer';\nimport './styles.css';\n\nexport default class Sort extends React.Component {\n    \n    constructor(props){\n        //The size and maximum bar length are calculated based on the window height and length.\n        super(props);\n        const size = calculateMaxArraySize(window.innerWidth);\n        const barlength = calculateBarLength(window.innerHeight, 3)\n        //This component mangages the following values and will rerender the necessary children components when these are updated.\n        this.state = {\n            isSorting: false,\n            size: size,\n            barlength: barlength,\n            array: getRandomArray(size, barlength),\n            speed: 0,\n            arraycount: 2,\n        }\n        //Binding the button click events to local functions.\n        this.handleSizeSlider = this.handleSizeSlider.bind(this);\n        this.handleSpeedSlider = this.handleSpeedSlider.bind(this);\n        this.handleAddArray = this.handleAddArray.bind(this);\n        this.handleResetArray = this.handleResetArray.bind(this);\n        this.toggleSorting = this.toggleSorting.bind(this);\n    }\n    //Recalculates the height whenever the component is updated\n    // componentDidUpdate() {\n    //     const size = calculateMaxArraySize(window.innerWidth);\n    //     const barlength = calculateBarLength(window.innerHeight, 3)\n    //     this.setState({\n    //         size: size,\n    //         barlength: barlength,\n    //     })\n    // }\n\n    handleSpeedSlider(e) {\n        //Changes the speed at which animations occur.\n        this.setState({\n            speed: 1000 - e.target.value,\n        })\n    }\n\n    toggleSorting() {\n        //Toggles the sorting button from being on or off.\n        this.setState((state) => ({\n            isSorting: !state.isSorting,\n        }));\n    }\n    handleSizeSlider(event) {\n        //Changes the size of the array, also stops sorting.\n        const size = event.target.value;\n        this.setState((state) => ({\n            isSorting: false,\n            size: size,\n            array: getRandomArray(size, state.barlength)\n        }))\n    }\n\n    handleResetArray() {\n        //When the reset button is clicked, sorting is stoped and a new array is generated.\n        const arr = getRandomArray(this.state.size, this.state.barlength)\n        this.setState({\n            isSorting: false,\n            array: arr,\n        })\n    }\n\n   \n    handleAddArray(e) {\n        //This sets bounds for the minimum and maximum amount of arrays that can be on the screen.\n        let arraycount = this.state.arraycount;\n        if(arraycount < 5 && e.target.value === \"+\") {\n            arraycount++;\n        }\n        else if(arraycount > 1 && e.target.value === \"-\") {\n            arraycount--;\n        }\n        else{\n            return;\n        }\n        //This will recalculate height (since less arrays means that each one can be taller)\n        const barlength = calculateBarLength(window.innerHeight, arraycount)\n        this.setState({\n            isSorting: false,\n            arraycount: arraycount,\n            barlength: barlength,\n            array: getRandomArray(this.state.size, barlength)\n        });\n    }\n    \n    render() {\n        return(\n            <div>\n                <div>\n                    {/* Sets the props of the array container */}\n                    <ArrayContainer\n                        arraycount={this.state.arraycount} \n                        array={this.state.array}\n                        maxheight={this.state.barlength}\n                        isSorting={this.state.isSorting}\n                        speed={this.state.speed}/>\n                </div>\n                {/* The buttons and their event handlers */}\n                <div className=\"button-container\">\n                    <button className=\"medium-button\" \n                            value=\"-\" \n                            onClick={(e) => this.handleAddArray(e)}>-</button>\n\n                    <button className=\"medium-button\" \n                        onClick={this.handleResetArray}>⟳</button>\n\n                    <button className=\"medium-button\" \n                        value=\"+\"\n                         onClick={(e) => this.handleAddArray(e)}>+</button>\n\n                    <button onClick={this.toggleSorting} \n                            className=\"main-button\">\n                        {/* Changes the text of the button depending on whether or not it is sorting */}\n                        {!this.state.isSorting ? 'Sort' : 'Stop'}\n                    </button>\n               </div>\n               \n               <div className=\"slider-container\">\n                    <label className=\"slider-label\">Speed\n                        <input className=\"slider\"\n                            type=\"range\" \n                            id=\"speed\"\n                            min=\"0\"\n                            max=\"1000\"\n                            value={1000 - this.state.speed}\n                            onChange={(e) => this.handleSpeedSlider(e)}/>\n                    </label>\n                    <label className=\"slider-label\">Size\n                        <input className=\"slider\"\n                            type=\"range\" \n                            id=\"size\" \n                            min=\"4\"\n                            max={calculateMaxArraySize(window.innerWidth)}\n                            value={this.state.size}\n                            onChange={this.handleSizeSlider}/>\n                    </label>\n                    \n                </div>\n\n                    \n            </div>\n        )\n    }\n}\n//Calclates how long the vertical bar should be\nfunction calculateBarLength(WindowHeight, NumberOfArrays) {\n    return Math.floor((WindowHeight*0.64)/NumberOfArrays);\n}\n//Calculates how large the array size can be in order to not flow off the screen.\nfunction calculateMaxArraySize(WindowWidth) {\n    return Math.floor(WindowWidth * 0.147);\n}\n\nfunction getRandomArray(size, maxlength) { \n    //This generates a random array.\n    let array = [];\n    for (let i = 0; i < size-1; i++){\n        array.push(getRandomNumber(10, maxlength));\n    }\n    return array;\n}\n//Generates a random number between the two bounds.\nfunction getRandomNumber(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","import React from 'react';\nimport Sort from './Sort'\nimport './styles.css';\n\nexport default class Main extends React.Component {\n\n    constructor(props) {\n        //using state to store the window height and width so that whenever these values are changed, the component tree is rerendered using the new values.\n        super(props);\n        this.state = {\n            width: window.innerWidth,\n            height: window.innerHeight,\n        }\n    }\n\n    //When this component is mounted onto the screen, occurs after the constructor.\n    componentDidMount() {\n        this.updateWindowDimensions();\n        //Adds an event listener to have a callback whenever the window is resized.\n        window.addEventListener(\"resize\", this.updateWindowDimensions.bind(this));\n    }\n\n    componentWillUnmount() {\n        //removes the listener when this component is unloaded.\n        window.removeEventListener(\"resize\", this.updateWindowDimensions.bind(this));\n    }\n\n    updateWindowDimensions() {\n        this.setState({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    render() {\n        return(\n            <div className=\"page-container\">\n                <Sort/>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport SortingMain from \"./components/ArraySorting/SortingMain\";\n\nfunction App()\n{\n  return (\n      <SortingMain/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//This renders whatever is in the App.js file\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}